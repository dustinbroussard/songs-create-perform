 (cd "$(git rev-parse --show-toplevel)" && git apply --3way <<'EOF' 
diff --git a/assets/favicon.svg b/assets/favicon.svg
new file mode 100644
index 0000000000000000000000000000000000000000..900fe4a66981d46a8efa681a216d3693fa831d7d
--- /dev/null
+++ b/assets/favicon.svg
@@ -0,0 +1 @@
+<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><rect width="100" height="100" rx="15" ry="15" fill="#000"/><text x="50" y="55" font-size="60" text-anchor="middle" fill="#fff">HR</text></svg>
diff --git a/assets/icons/icon-48x48.png b/assets/icons/icon-48x48.png
new file mode 100755
index 0000000000000000000000000000000000000000..9548b938923a811a1b632b3b7a17796cf3fd26e8
GIT binary patch
literal 8947
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
N002ovPDHLkV1i^6W!(S(

literal 0
HcmV?d00001

diff --git a/assets/icons/icon-96x96.png b/assets/icons/icon-96x96.png
new file mode 100755
index 0000000000000000000000000000000000000000..9548b938923a811a1b632b3b7a17796cf3fd26e8
GIT binary patch
literal 8947
zcmV<PA`IP$P)<h;3K|Lk000e1NJLTq006)M006)U1^@s6Qrv6@00004b3#c}2nYxW
zd<bNS00001b5ch_0Itp)=>PyA07*naRCt{2oqLoN)xGb()!j2aGt7f|F$}Na733x1
z6=X2Ja+Am<St=UhQH<gts5fTaCC02AaV<__)-}c?m)x71gn$^2VxnSv#Bh!tqn-p2
zMC4^a9*UzpW(JVQyl1+*e)o^2it4Jpt9Er)byv^q&sw!schzt2+Ew-Y?f3p|K;jp#
z0O$cg86Ld=Ud?jaB@!XtL*@#e>9NcAr<6zle2m;HyXf(WPwzl7fY^=PE3#L|`yRiW
zeuI+h1OyDqbpo=4{O;$GFTzWuuPXsYR{)WaXHn`90WF=tCv8B&Q#&2dIxtWl{xpEf
zv_lUY1T<6tp@6);&OYFyvp{<+lUU9H80=As@`iwX!K~pv>x_hei)(<A0w0p&BS+hS
zPukNBJz(@=AUx>RNcPE#GoccwE%7HcM0_(;04P3vlJ{DGo`l;_*8q6ghtvdy{%ipI
z08A2=o;wT(XZSikI0c;U%`6TlhL!;1(yzS%06sbcv~;-%aR9)?%x)S?`lA872Vka<
z<kT9VBI^DQ9eu#=lkUU$g#ut^9Z(c;A9hCz&@Egt>;o{x{Y`>Pe=>mo1K@u;N|hD>
zpC95b<`bR3p|k0wDpyRY1_l?2%f}MHwiZ$8)d2oS8mS5#{lNf20GzY1NmW2qv3RU+
zAL~D(0%0Xt#S>*)GZ0gSVg?{27*z7z0Gw6y(&6H<Z9bMkQt}AVce3{sa8{^Ilec=5
zuL)P-l=gYU#ClZR)q(pLgQLKd8fQ7NMl&H<8s`=HXaM%P{@i*XEbtu$N^UQTNU8At
zNuaIINh+^&DxVT-ulSRzfJ%otetRFVCqTV7L1cCv5OwHH+HxFF9c!O?p<8*8NZ2WV
zL;)^wXyCPUCZ`HW#F<_T3@WsjaV|we2zXaQ&<&siz##5br(!!FyDx*rj3M^ZKw3M2
z4{hIZHvpf8)iWo^2EflbMwbJ_%lIMP^=V5)aOzZWE)4>yYk^D@?3CXr*O!f3f3bW2
z=X!yEoU#iYIDHFRf?fvjb>@}25@5W|92lwi*~4jI&Hh{b8Njt3rzmZLWB}>q`YI)R
zB_!F$?z<d34V>(@3mpjE3q&H2uJX%VKN#@75fSjVZRV77{mXd*z*GLpC@`5bN-1;w
z;E{etl~WzewE?h|f94RNnA7zpbN%2_5&>q^v9ATx2y$rvY~`0#p8SXR4G(+<oa*6)
z%84%K$^hIczjIwu5;S<<vNHzkI>8H-b$!f*0k~6s=iUTKP#ISN3@x>uPpH7wW?rbQ
z>SVSJz@75TDo_5S0GQ|c`({lqvuOZQ`3ExYzjIb}Gg}K7r1B4Rc;9p$cSJcWvq-aH
zWm5Si7YJBM;CBfim0ywy?;AJfrX=vw0HpFu*s#8JNCBpE-PQPJ1b!L7)6BC{`6U{x
zZ$791Xej4}__H6$@T-1hwOFbA5*94Ic;`3}XJ-1I>#H9nfHmbaIYpaPehEtl_-nj9
zuL^l>0M-OnM%feFr1DENSh~QU6XvNAcxeEiG0(E5G)v`|m|;zC=NmzrSGV=j0IDo!
zSPyXUw1>Bp^cz$HPBOgDO}45P02_}8?(oV0#2URsa$=i=&%ra+bCt!srmrVeAukNT
znvgn<8yGpIS>gn%dd!<l=YbLUGY-J=-XQD!5>ebWiZdcp0}!kFNadHfWe;P~%wVRg
z#*9jVOboz!<I#*!JZC4W5{VVomakK4dD3YsStcWE?sEU}gMn+tCtVtrIyhaG3_u9z
zhylmifj@tE!QZHOjUp{wPS*g$m4D6E{%!p!>E93mcf4xVEf1$or&9&8_Q6IN_tmOC
zQu!t6qUjEq@>_m`*u^Gr=WpRQ0NmvM|8j}Gr|p?<Z2$$^RlFoXT=w$!vG?pJKyy2=
za<f&(_>Op8>9pI8WnZwIVU5&jMU-Jf=V5<XjP8Wbn@CIg4fjsHK4}2;=PMlBn}ON&
z7X<kGJ8uN=HPQRHtpZ(VIpee~kwoGJy^P&h*{jGFxQW({0UWTLnOkp_l70RXzcA}o
zh+EtFR5VIA1~9>L#=IM2Y=CYzD#;yeuM#6ggNwESKD3-+<^EaNmWaOnin9z6LhJs!
z{$E}CA5a8(qm)PI3*RFXc{@(s@+_*0xXS`{raX5i_MQDi=)OR*WvDXJnIIKmC4|mc
z4@&<nwT9bJIs{Gs^hC-zBEq@8P7IEgqC4J;vd0%9k<HEGHy=xF5c9w5F#wM9Cq!G!
z&OJY@4e8ci_~6CiLQfmPETwDj>q7Yx*K@-pmi{|JinY+=DJD;`y^^<M@AbdK<f;bC
z`N+BjNKpC;XH26pUA*(6*Bbu#EqvPP-4?X>PQ4!g`yc1~T$Y*MYvV9$^(W22F_9|J
zO_npPZqESh##p=lM%(K%Ubx#;d`}*F-EvNKseEs>>~$rtG3EI?nddW6emjnKTu|QS
zQx^({(+uL1o1Vn*l4{S>#YB8>h{a9<A_njWM~RkBk;M2;ugaJ|V&LF8Yc4_NK^6m>
zTmE4=*V@gPvwog4z3rBBZ!zKsBES7$qyGD6bC#tQ$I+Xg@+vvb^u|;Fv)cmeouY9+
z5<H2~?>~Sxp|&5&vtCtg3@k{@tQn{O{?6uKxe9B1#%Rc9Phl_F-kSP9%^3$y24MYq
zRi=Lb_P(@kED07jjJZtzz2?AwxC;Bm@m>1wH^26XXK8XIVNy?4=IoGXxhnxm8P>hW
zyM~V>H=Mimc>q9b*O{~$?3<e3*MCp19%m!zF<VV-0dwXofSm!fTF!i)>$*;o$CMQ$
z73Y8L`eRz*N0(jL7p$c#$4(Ez%&HK#;bvz5&e|?VeftI4n92X0_Z{>u`HSoDH;%hf
z|2_Ye2fRv_7-k)0Z{R(c7hJpwG?lYusia>~7;!s45-5pWn3#63Ex$5Fo&i`J4(8c+
zJNzH@mE;$1HK#Y`kuj%C{)AXdb2*J+_vWtA9lUuzv47s^EF@t<MEZ1*o5o&=KOX)s
zp>Vg3|8D?*gqpx*8^7mM>Kr(52B<N(;u&5BG>JKn6EgsIy((}NJZ3))yeM3V?%RFw
zvYq!dzO)=$ulpqc;16H=7a;>!Heo*2Tz(H`JbyQKo&Lz@6#4_p0IWrYxn(UIzj?{%
z(mD)X|4&Ge3Iz&A4H|;ey=~}-_u!pV`*F>y|B4sC`mackiVzfpl@NxNRHJVFjZleD
z5-Gyu!K0u+!J)QeSbOjltUV|;5zu$Gw*a$;Uid$<3^-yLnJ1X$2c=&HlH?st9j2ab
z)7-?DkGzBMx(n+`R7&8JPJ@4*UeA2edQY#ZN<ONbWdIhOdx0h}yu3*~rLwRTOU8f2
zv-m`(XG^RG@PS35*5v2&ZCU;Cn*EC&#nCS20&j^Mc9}}JqA*M9i1Clv046%#BtPbM
z<rPDU2ctJ(Ka*9Iv)_8olX&uyPSXt0SwmS;BaDCSt3WJ&KN3%=C`gvDVa7t8wBn1F
zdJ@k-!TzmZZ1Tl;A{g`jvxUM?%COC}+pyxkPvPus$%$x#3NrVu(Y@rQjN{0AT&_zu
zeqrktM<u4&p8;6)Wk;EV5?xj|#d6MWt?<p`uCkn~D`rl)1pt&6TK7e0teeD@H#Sx;
zt{lyk6XE|geg{PnuCJVdgLz$gF*8%rg^UKk|FQw2ynwv{hc>O3$A2#P3G;k}Q~kKC
zeyY2KF}P~j=Pl>v)=sqa)Z8%Uiz)xrrR+KR1xjkePB|}o_mpcgOK5*(3UisJK7G}g
z{W&jucRK*)!=m`soBxQGp0haH+ku`$9};SEjch?Ug3^K_3@I9ns%RN1pZta%rv26z
z(9&}Tr@GIfGtq;-L>wR>915W*T!_kODTWqTVaQX-HO1$?^(P$fK8@48?dXj4Ag(5h
z)o>_`l1L${qUESBsYKP2ivR!}x4nS&SPwelJ?M&cqdVS*UNwd|#SvF2xsI0z1cCwu
z;ZO*Lp#nt11t=>h#^7ivibI8{dFq=uxM&@!qGjlab)zHRgYI}QdJ=tzsR_i@1XQR{
z4KC+HAq5d7jA*z3gCfPKC@evBv<!m{&!3OjE{b<TOm7vyZXj&fpw#~z!C3iK_Xq15
zeJ9GE5MSgC02NQ(;7Y#q-`vG-$Ak?_J&Q}?48IZFP?7q7w_N!p$rIjf78cbE!0Psp
z?{-ci2{wHu*D;mM&Vf&X3kG0yd*}su;t@d-V7$<w(aZ&5BLTlB!@br7e02-}pmWKK
zzTQgGzZm?)`F7Z=A7>s}317|qHGmBVbOQ*jbLF*KB1!V6gT6-3ZUmb*y8a-8iCW+J
z&-BAe1~zxSnts@Xm<vg*rJGvOx}+Y67;M9j1u$&)6_SC9*~wL=L=@l>!%9ZZSOB{U
z6!B(amMvaCutZ`cE~Z~00B`x55{V=Luru}dLjdMvIVloJ_Nie`l$;m>kR^A%-Vu#P
z5ekJcXwV>3R#u{*Ao&P4+;9UrJN=)sU07IX>sH-NK|uj3DlUwy*VfkJCqMZKLZQs6
znj*X2_=TJ24+LdQHID$v25{<e>G0HpC6j~WjW^yP5&TYvoBQ<j_1UI%!GZ-DrGbcO
z`SRsi{SMiB&lw*^9c~=Plu^$ANF~!*pgz#o*Qe+7PW1NnqNu3Imvn?eAtVyX*`Xpi
zaC37rh7PqZ%`-Zpa+{M6A3hvMj~-1qm(9{Z%l$`;7=dHQa<3a)1oSuy-94G}`s=T!
zDE~zlT?9o@^dlOLV#kgh`t?W}{w+mO)eHU0BS$)KMp$28pORMX7(ae|+G%*?ku3V)
zx8dhM|9P&HkTK3B01@!E@SaS*5R1ihrMAoIR8>toS9ODy17>oMa5#*3Jf3zu#ya@?
z`SbDWs~HR$rFrjMwn2mtC;^<aN~?Kf9nl;;91f@C(0(vx%ozQ*s;X%>WLK<M0RU+?
zCUd2H#`|XS{6QhVQ*XkJGVR&32SlVFT5il@`t<2gRTV^p!-o&+=M_b<#L?U=HW&RD
zzxV|J_-?Q)jA_;mRaH@2TZ;!CcmS7QetC*~U0t32{KoVepI=o~#N%<CJ9jSIkCQQJ
zwVtzi?BBm%?|CRGDY2Ek=%R~g&z?PwJs3O^iG=GgEJU75RJOLZ*7ja+zx}rGyA);j
z?%lpWzwd`YZ)RSU023!p)N`KB&Q6><#h;va;J^V)n>LMkjZ7uP?%lf)iA1ny(IWj^
zC={~Dg~Ln_V*rxvlfuG6D2jqmD1=BPB2+!8t*v#G(P(Y8?p9@_v9S@AmCi0Kjn8%0
zU3a0bu1@dKGGnajIkmfrii-5cz3B4?iNKct+M%kdZLV|j<VkMW#~*)Omt*Df07y|3
z{T@@NPG!nWnKH$bobIyAE^{5n)TvYHzWeT@Xf$fconL$HHOKH8U0q#{GHceXVP3DO
zsL*B9<m&w39%AEJ4gmvX005|<pn$r&yKN0&#E22x56im7lXbd2Yu2o^pQEs_Fk>SE
zK<~Ws4iOP4iX!}6FTL~<S4JDSd;Iao9pl-tV@J;Q!S?W^3KX!?EEbEQxVYFd4)D!y
zep8n@a^wg%ym<gA6EYcZ;8i``GG|V5D%Yx2s~lyuhW<6zT*DnGEG#U<(@#H*B}<k#
z#%EVG%qP;aoNOI;-E|ig6%`4~$6_&N&T8cMzyCc|S65R_O%1JEw~pR@_g(tk?|w&D
zU3C?0+O$cR8#iv8Z4UU<Q%|M+T#BN2QUVxpk{v&Oe2V<ZlPC4xu~>|{y1MAmM;{fw
zXHQR0PIbfa@T3ZqV*_~Wt+!k&iCH10PoGZdP*6}{iF@zfz54aGwl+_c*NZqr<C!sI
z1~oS~698JXW)1h*dEpl>T&T<BRU3d)l@EL`P-9~wfaDC&bTRj}uU@?xB_$;oJ9aGQ
z%$bAg>S}~SAt;K1>gsB|^2#ev6a}%E)n)mpQKR(VrKS1jiFxPFov5#`2LRl0#~mqE
z$#6KV_Z0EQC+@xX-mIlHTi9Dpj!S^!$Bz>cQCV48Mmeh&xh(*S$K#GUrA8<ea-B}M
z$Du=qgySJ1nml>3@cWxHXO88XxdXy3{H?d%np53L(cv)_Oqmb>Z+2$ziR$X4bJMP_
zE(ggZeSJw6jzfm9H@d&>y6e127zZ-+wP$0L_uY5jbtS)duk&8M+Gy^UEn8ft$N2mr
z_sSYanfrysLjc^p!7QVF;CMXlIN?iGRejdz+O=y_uKo76zXbri@WKm@_tb{{Crq&V
z3p4lpcro*|u&^-guvcGwb;kEMqb=SkF1D_sGM~HWo_o0Qy!YOF-X<&)V$94)_lTHU
zG|a6JOcki3qa&rrz2}~LEHcZMElZK<>+7>Enu&;}PoM566Ny9|WsKE;vuDrh=Xir{
z+Hv&gQQ@kR-N8!7;>C;USHJp|kgV}A4s!8iSkJGe|HBVI6bhfUL!bvpBlW`Aioh7a
zPk;JT%L})|jlvlD^{;=O^51SC$Sxj@DO08p;5>RwMD*;l&pJNOiWMtp`}XZrTU$%d
zJ@*_v{P4rn)YRk{_ly}cgwxErZ@SOFZQHioDt|#J0|N*vsey;uPeAkg(0Kjz*SRlz
z+O%oH@xA==%iMT+dwX4_$w`4k48SQK<Jg8BS_AjXU;Z*PEgBsi9rWOX4_d+}5(!$n
zcCDw+pR+@(7Q-<BAW%I)tV2;0q2YhKW7e!$)Y;idn>K9{>K!p3i9{mhqn|u^l7<W!
zk|J}*9e3zGN3mFpIy*b*(n~L;Wy_Y)gb5R9*|KH2Y;|=t#bPm1Rh62Wnz#z5swydp
zLX##<qARYrf}6h5(o)*6VM9uKckbNj**ECz?M+EnTU#4_;R|2Lxo!Z$`pfYQ2Ly6m
zutXw^*s4a4_U4pGg3Os7?j_9t4s#_Wl6>cb)2y?{fC~mN&T_fav?o}=W`#;5T-aNq
zni&DutqK0fv?uV)I<}ld5;R=sD&GLwO*15l{M}1KBFP1^5iIH7oV1@qW;6i%mDdtU
zK63C3>#V-#uh9Uk4lIwfrT%AcJMSs+cwF~2Q&;C)mn$kN!oGd`FmK*G-_s_^1LoF?
zNa<6B?W;hanx>Er_Q&BYaKRmkah+*POABtf<rb#AW+dI+-Iz3K5;kw%3?jnHl`DNq
zqa+UqyQ|d)rVXH~Dk71H#V3!OIrZ)B?RfCP2fa?3Bww)^0MjrVfOW@sGd^x^mq;Wm
zRhjkc*9(Qc{PN3DUS94;vLyLJm8piZ?=zNE%A5$Z0Zg=rZ*NKcKX;f##7i0)8UVo7
z1M!c3^drl;O`A6Pnl4EmFiEJ5nlj1FxeC<ljsF@^-g?WrXP>r+TVvO*T^5;4{OwBy
zE`ezSXlOf*7<2x`ix;QJJpcUjmT>RC|Gs0~eSLivugFf`jKBEBFXHIYqj>YpH<{PB
zZ{MEcAz53)EP}T5(s+nG2a87@d4##NQoF~tZQE?a8++e~2xrfpwUswgQ&Ype_Kk0R
z!{Sxi7tDKrWjK2|b>8&QlB})|&^UeiG;@K4Mny%1zTm{pM~w*8)zv~_4<A1481EBL
zJR$UacDQ*@W>i(BuC6YjIGxzMd9x+ViWMuEvMX1vBmgvI$PjLP#`O=L9)k1#MM?Jt
zo*BUU_3LTq(4j;`)Y{t0{Ad8^mRoKiBK{g&qZ3-z2QV&bVTCs@dLbgq+F2I7XZ!Ti
zPgCSZjT*&ONT+wC!CG~usw&mg)TEr-xN)Ox9IIBXqEIMAH{N)o<(l37-QtVhWZeJ;
zNBwz_^DkFh*v@)s#&cS3bKt-MM@8Yie2sbY=5f<x_6Nj^Ph-rOF&U@FZpE91mg^c1
z^GYp^y1F`D#%MHKw{B(LBN~nB&uy0$ql-n>vzgN~XwV>Ub!J*^s&0n3vaU!CTpZ3y
zDG-T7h$y*y5CEMxal)b~L_|OQ;SUJ_{q1jmBO;<jixx5CGv|&hney^-BC>aNSX5M$
z63_AD$C+|kiNPz8L=51Uzx*W;5#4v+ea!2nrKPsvjrZBGVT0}pk#$|<n-CGj<8kiw
znKNgmJX3pnd&>0#2M(lMU$J6^w|e7o?yr&VjWRm4x~o>~KK$^*M3kBX5nb3R=E^It
zBqDx}8w!Q=7tiyH|IkAZIeujAzD|nM(9mEjGjZZX{W`0D4P3}E-+c2;=JoG=?|Z@q
zuyEl*%e8Pg?AieAWG76Rpv&;uVj}M@twS;C<;)>GStfS9K-O(oVx}%p^SWUVAXESU
zGtWE&02n)VY>J%bDNfrN{^O57X2z%O9H}S@N=i!f^VeQ`t={8t|NZv^5O-N_w*!ji
zuAImI{rmOwTzcuH`uTP1*6HcddUJUDjs5IrKNCtPV0~{u>T?ni9((LD)YsQz?%cW9
zw{IVsnws#}zy1{uJ@k<Ne(f-N;ajj^0aM24gVa;znRIZ+36@kF>!b)-F9jAaUTn!p
zh={gq*+Kwl{`~nVxyZC>(;RaZqr)l|H{X0S5jlH%7RkYkZ3UhTt6^>A+H0>RB7PO<
zrkifkWmyiejJw#d!W;dGx`FpRmt1lQ5#`8Rv`^I^4d)xquJin%%rDdU0azb{h-mca
z(Y8u!<S&2u3*C0xZ7Gd0B5U2%e5_u*n(n{<ep?w;RY_G<?(QipR<B-7*I$2qiaT~9
z`?@kuF>k;9cK!VF<;$62w`|#>%c!bKix)4ZqM{;dXlS5m)22~zaj{<IY-nhpXP$Y+
z_L;T44xGH<d49|rma2;pZbLmIQX?~a-14{-m^^v1<-=+i`?if?h=|s$TW5*u?z`{S
z<&Pdc>dNTMhgNUqxn0x_RaL32t&OP+ZEbCOdVcVOA2_DR>>Efsv>ew7UffzogPn}q
z!|V8j4xe*>4d)wAul4MqwB8ouhIi&F!=_D}EHD4N-~BH4qc{yr8D%q-(W*da&Ya<f
zA3uJ)Z5;LW^|tr2BOZ^_=RWtjtSYQidVM*}p5I24`epzNERhb5`c?{*l#~z=(bA<$
z^>g3;_P2?MsIjq;h^%f9iP-(rq94WBRca?EB6H-(5hAkRZ`dh4M$FfY{y;N%&qhE0
zc5)(HISm>#DEkH=rhgYUj>{0|1kB)eKM5b^#;Va>p%In=u;LS$CSks(@m@x`kt0V6
zedGroc!1*ZICXY*auwTdZ!Olig)z((S6o3v*3t2F4kM+d)*MvJjGUg^ST!v!F3!I4
zk1prQdd4A3<h8|~mI7<nt|b=Q02eEl=3$Ii1eWtz%?-QVmaN)6jK*On7mY@R(!&~c
zHf|KCv32WKA|kztID7W&lrVPtCOf?!^E)wb7#NGiQs!#0m_2)Tb_{?m=iPRo=W$NR
zy!7`JHa5&O%=PHj*47kX`b(ECrS|srlrUzW{)L5wbmyISGC$Dr<;(S|lQFkjym+yY
z0e%1b-zNZ6RaIpxXH3tuY13%`{{2k3FMa7tDRLSUCr)&2)JB|oXUy}HjJ)y28y0!<
zo(*Pp?%YX-4jr=HkUQ-o2f4q-LCa0b3j^;(+KZ#Hv624%_rFtXYb&+4x6|RnhiS=@
zB^J4_eB~?j(MKQA)TvV~lia*Ij2mn>H#gIyNt2jz6DLljo}Qi*#dL~$?%cW5($Ye|
z`OR-==+L3Ivc@)-u?u?KxN#H?hyD8=V*1A4DB6VEVL7s#VT}e$Ptv|Y=SRxNjvdP#
z{pN*PxNsp}eDOu!(&js6T|0OhIN8mT6xM6E3u6A=a%Ky|?X-{Uh9yZvmEXvkHEVoG
zNtURw?pMZ9{@2_@>(&6iW;vr;3kAQ|4NHK>9(znk?&6Ct)_?PM&ddugs!ILOuVsAI
zO|<DOi7c_4VI{_giE<L?ev@v${dN$MWdh%`&pwNuo*sQ--JU&r00496&dqvSJ;SU^
z#K?4$Sas8ZbPRx5?x59q)}SPFR8_^wl`D0{*Bpvz$D&1x5RFE4`LBQd>rfO0@4WL)
zu9BP?Ax3qYz1s`G(@neR-3B<1HB}!n7E#Mmz!!e};~ygui9k^l+<f!RXliOgPfrg%
z`|LBUTD1ygWo7!*<Bc0P<~q5V(P*kpA7=Xc1k&8WB9qoCyBw0eLK3fVr%P$+awcw3
z*f%`aYdu#Y_ZE=2WJIa;oX5%!WbPNpdgFgs7m{Iy++9ZEl7@=Z{~s{j90D0`-sO*D
zEZHk0$pn_JoOX6}n+{$W0NVl&GIr*ZMj&w_3-x{@UX=jWcusb+`)kKlSkFl$05FSD
zRpu+dC%WsE0T5Vyu&n;tp`~)mRf(1ILhDA1O<cdNec<&%y2Q&i0DBaUWx-}w781$D
zwW<GO3E)@<PdduG;1;hN!R)+UHi{*7uykQti}hR*PwNkU^a8OHc!1H3C5=Fm<wma=
zzxD_CljY2*9-uR3m6S#>aB-*nulkV$KbxcMM#|iJ_D+6sy2QYOrTlLnvuoP=qN{%H
z5W`OJR<^%OSrQB&0;2qY|63%9H;Msi1OowPgSR;+$`52`k1)Owum;Mc5%gbJ-}b#0
zAjaK4%=ZzaYz|3@PoD;4o1nkJ%lUJt{8_t+0k#n|4r8zU*>aq{=2((HlowhDxqv_@
ze^zf~fUVKfhX8{LtmjX50SCFOfFwa?R-JWv1CX-@Z_aOKfc^Ll<-mwCb_iJ|$}iHZ
z+GbrJb2%-IZ3GboxP;?YMH)eVkSEHYvzr>=7lgc*xaS1W&KOaa<em|w)|Fg9a$*~Q
zZV!+{J<PQM0O=S3AWMUw!TVNC=j>*60y);fAQ%8(X9Sb0fJ%m2JU|*j5C|z&*CiUx
z-zVq#m-7S|u<sY(tsx+?bCe|Ulgvu!K<HjJMuJ6A0KCGyLg2qpMM-{$XpkPIpHoxJ
zSGT1#?EnA*kx4{BRQ?Y>b5j1lA|T2S1SlaU_@%+%LSPDGU`0b#i~OY@<oZSemmmZ7
zL%>dRhNK~Qi{1PF_$+YT(Kl=$buEyIGSCKqGctA_yAPuhd;bE7ICk$>to_vqfZ^sX
z7zEt_H0(=*sWm`_%{uAcIIz9d<0SQScng;_#7fw}>sR0tXux?^9B)#cMuLE?vP7_D
z-mqlH0uTPSL}v0rxAG#9CY%ky=_3NNjbOyCn_1&nJJ8f78e86wSBW(sHb+`yam}eN
z;J^T#Z91(MC@Zv=Y3=|Ha~)Kf$vb_@y9ApMGX#+m0RXnQ0KExkxqPOq0GKAQSJ)@#
zfTOlk7>wkt9_4Mq4U__C7m}P*1ypgSRhZe;3UtQPPgRhpDgq`|i^;y%0`v%H0_6~W
z_W`9p7=Xs(0B#eK3@h$-vUHx!7(ASMag21wfE_2?#QrpZo6<;C;OI{Vps^poMZ(gf
z%YotcLk&#cZ3g<dOZu`)aRiu|#wH|Njsfl-p$Whk_csbI{m}q4ngBGo3Nf+_7*(GB
z9TRG@9TE3w9dkh_xy(>BXJ?UK@7ECkqtd@=aOuwmpm7a=mt2P`3Inr-dY_tXbEXH_
z$K77YiG=`O^e{DnV;~rSk@U0X;s`LM8i)pb!#{7F2n-m#7%&fN;xvHDjAN;c0;4N{
z5{5SmzfmdKM=v%wCBiuXgT0C@Ul^zcV8ovadn5$Z76YXPKuwAL6b&<)FQgNlz^CnY
z{&T!wK<mJOes~50#S54G?&p!qs8Uf3N1k>3+j0V_&n7vKd>P{Oz{9<%e5MD0;E?yg
zMwS5L6d^SiRRA2!X^N5@f;C-I`6W5$Z2-MUwkt9@dI4<7a@q$B{~z<>oP;cUsn-Ai
N002ovPDHLkV1i^6W!(S(

literal 0
HcmV?d00001

diff --git a/assets/offline.html b/assets/offline.html
new file mode 100644
index 0000000000000000000000000000000000000000..dc343506076150eaa4a0e8cd904aa68d641be8e1
--- /dev/null
+++ b/assets/offline.html
@@ -0,0 +1,18 @@
+<!doctype html>
+<html lang="en">
+  <head>
+    <meta charset="UTF-8" />
+    <title>Offline - Hill Rd Setlist Manager</title>
+    <meta
+      name="viewport"
+      content="width=device-width, initial-scale=1, viewport-fit=cover"
+    />
+    <link rel="stylesheet" href="/style.css" />
+  </head>
+  <body>
+    <main>
+      <h1>You're offline</h1>
+      <p>The Hill Rd Setlist Manager is unavailable without a connection.</p>
+    </main>
+  </body>
+</html>
diff --git a/config.js b/config.js
index 416df88018910e8da1b3a71817ae74aca56c69c3..403c87725dc149110694b2c80385b4b2c1afe717 100644
--- a/config.js
+++ b/config.js
@@ -1,14 +1,15 @@
-window.CONFIG = {
-  chordsModeEnabled: true,
-  autosaveEnabled: true,
-  autoscrollDefaultEnabled: true,
-  showExperimentalFeatures: false,
-  maxFontSize: 64,
-  minFontSize: 16,
-  devMode: true,
-  openrouterApiKey: '',
-  defaultModel: '',
-  // New:
-  chordLinePrefix: '~',
-  assumeNoChords: true,
+"use strict";
+window.App = window.App || {};
+App.Config = {
+  APP_NAME: "Hill Rd Setlist Manager",
+  VERSION: "1.0.0",
+  STORAGE: {
+    SONGS: "hrsm:songs",
+    SETLISTS: "hrsm:setlists",
+    SETTINGS: "hrsm:settings",
+    VERSION: "hrsm:version",
+  },
+  UI: { AUTOSCROLL_MIN_BPM: 20, AUTOSCROLL_MAX_BPM: 240 },
 };
+// Backwards compatibility for legacy code expecting window.CONFIG
+window.CONFIG = App.Config;
diff --git a/editor/editor.html b/editor/editor.html
index af515b59906f2018600b6d9b4a022a80f33f156a..2cc2dab800839b08a6406f7396b5117e45729b5d 100644
--- a/editor/editor.html
+++ b/editor/editor.html
@@ -1,345 +1,497 @@
-<!DOCTYPE html>
+<!doctype html>
 <html lang="en">
-<head>
-    <meta charset="UTF-8">
-    <meta name="viewport" content="width=device-width, initial-scale=1.0">
+  <head>
+    <meta charset="UTF-8" />
+    <meta
+      name="viewport"
+      content="width=device-width, initial-scale=1, viewport-fit=cover"
+    />
     <title>LyricSmith - Editor Mode</title>
-    <link rel="stylesheet" href="../style.css">
-    <link rel="stylesheet" href="editor.css">
-    <link rel="icon" href="../assets/icons/icon-192x192.png">
-    <link rel="manifest" href="../manifest.webmanifest">
-    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css">
-    <link rel="preconnect" href="https://fonts.googleapis.com">
-    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
-    <link href="https://fonts.googleapis.com/css2?family=Neonderthaw&display=swap" rel="stylesheet">
+    <link rel="stylesheet" href="../style.css" />
+    <link rel="stylesheet" href="editor.css" />
+    <meta
+      name="theme-color"
+      media="(prefers-color-scheme: light)"
+      content="#ffffff"
+    />
+    <meta
+      name="theme-color"
+      media="(prefers-color-scheme: dark)"
+      content="#000000"
+    />
+    <link rel="manifest" href="/manifest.json" />
+    <link rel="icon" href="/assets/favicon.svg" type="image/svg+xml" />
+    <link
+      rel="stylesheet"
+      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css"
+    />
+    <link rel="preconnect" href="https://fonts.googleapis.com" />
+    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
+    <link
+      href="https://fonts.googleapis.com/css2?family=Neonderthaw&display=swap"
+      rel="stylesheet"
+    />
     <script src="https://cdn.jsdelivr.net/npm/sortablejs@1.15.2/Sortable.min.js"></script>
     <style>
-        /* Additional styles for metadata panel */
-        .metadata-panel {
-            position: fixed;
-            max-height: 100vh;
-            top: 0;
-            right: -400px;
-            width: 380px;
-            height: 100vh;
-            background: var(--bg-secondary);
-            border-left: 1px solid var(--border-light);
-            border-radius: calc(var(--border-radius-base) * 1.25) 0 0 calc(var(--border-radius-base) * 1.25);
-            z-index: 1001;
-            transition: right 0.3s ease;
-            overflow-y: auto;
-            padding: 1rem;
-            box-shadow: var(--shadow-md);
-            backdrop-filter: blur(4px);
-        }
+      /* Additional styles for metadata panel */
+      .metadata-panel {
+        position: fixed;
+        max-height: 100vh;
+        top: 0;
+        right: -400px;
+        width: 380px;
+        height: 100vh;
+        background: var(--bg-secondary);
+        border-left: 1px solid var(--border-light);
+        border-radius: calc(var(--border-radius-base) * 1.25) 0 0
+          calc(var(--border-radius-base) * 1.25);
+        z-index: 1001;
+        transition: right 0.3s ease;
+        overflow-y: auto;
+        padding: 1rem;
+        box-shadow: var(--shadow-md);
+        backdrop-filter: blur(4px);
+      }
 
-        .metadata-panel:hover {
-            box-shadow: var(--shadow-lg);
-        }
-        
-        .metadata-panel.open {
-            right: 0;
-        }
-        
-        .metadata-panel h3 {
-            margin: 0 0 1rem 0;
-            color: var(--text-primary);
-            display: flex;
-            align-items: center;
-            justify-content: space-between;
-        }
-        
-        .metadata-close-btn {
-            background: none;
-            border: none;
-            color: var(--text-secondary);
-            cursor: pointer;
-            font-size: 1.2rem;
-        }
-        
-        .metadata-close-btn:hover {
-            color: var(--accent-primary);
-        }
-        
-        @media (max-width: 800px) {
-            .metadata-panel {
-                width: 100%;
-                right: -100%;
-            }
+      .metadata-panel:hover {
+        box-shadow: var(--shadow-lg);
+      }
+
+      .metadata-panel.open {
+        right: 0;
+      }
+
+      .metadata-panel h3 {
+        margin: 0 0 1rem 0;
+        color: var(--text-primary);
+        display: flex;
+        align-items: center;
+        justify-content: space-between;
+      }
+
+      .metadata-close-btn {
+        background: none;
+        border: none;
+        color: var(--text-secondary);
+        cursor: pointer;
+        font-size: 1.2rem;
+      }
+
+      .metadata-close-btn:hover {
+        color: var(--accent-primary);
+      }
+
+      @media (max-width: 800px) {
+        .metadata-panel {
+          width: 100%;
+          right: -100%;
         }
+      }
     </style>
-</head>
-<body>
-
+  </head>
+  <body>
     <div id="editor-mode" class="editor-mode-overlay">
-        <header id="app-header">
-            <div class="header-left">
-                <h1 id="app-title">LyricSmith</h1>
-                <div id="save-status"></div>
-                <span id="song-edited"></span>
-            </div>
-            <div class="header-right">
-             <div id="font-controls">
-                    <button id="font-decrease" title="Decrease Font Size">−</button>
-                    <span id="font-size-display">100%</span>
-                    <button id="font-increase" title="Increase Font Size">+</button>
-                </div>
-                <button id="editor-menu-btn" class="btn icon-btn" title="Editor Menu">
-                    <i class="fas fa-ellipsis-h"></i>
-                </button>
-                <button id="add-section-btn" class="btn icon-btn" title="Add Section">
-                    <i class="fas fa-plus"></i>
-                </button>
-                <button id="ai-tools-btn" class="btn icon-btn" title="AI Tools">
-                    <i class="fas fa-robot"></i>
-                </button>
-                <button id="theme-toggle-btn" class="btn icon-btn" title="Toggle Theme">
-                    <i class="fas fa-adjust"></i>
-                </button>
-                <button id="exit-editor-btn" class="btn icon-btn" title="Exit Editor">
-                    <i class="fas fa-times"></i>
-                </button>
-            </div>
-        </header>
-
-        <div id="lyrics-editor-container">
-            <div id="lyrics-display"></div>
-
-            <!-- Enhanced Copy Button with Dropdown -->
-
+      <header id="app-header">
+        <div class="header-left">
+          <h1 id="app-title">LyricSmith</h1>
+          <div id="save-status"></div>
+          <span id="song-edited"></span>
         </div>
-
-        <div id="ai-context-menu" class="ai-context-menu">
-            <button data-action="rhyme"><i class="fas fa-bullseye"></i> Rhyme</button>
-            <button data-action="reword"><i class="fas fa-sync"></i> Reword</button>
-            <button data-action="rewrite"><i class="fas fa-pen"></i> Rewrite</button>
-            <button data-action="continue"><i class="fas fa-lightbulb"></i> Continue</button>
-            <button id="ai-menu-close" class="ai-menu-close"><i class="fas fa-times"></i></button>
+        <div class="header-right">
+          <div id="font-controls">
+            <button id="font-decrease" title="Decrease Font Size">−</button>
+            <span id="font-size-display">100%</span>
+            <button id="font-increase" title="Increase Font Size">+</button>
+          </div>
+          <button id="editor-menu-btn" class="btn icon-btn" title="Editor Menu">
+            <i class="fas fa-ellipsis-h"></i>
+          </button>
+          <button id="add-section-btn" class="btn icon-btn" title="Add Section">
+            <i class="fas fa-plus"></i>
+          </button>
+          <button id="ai-tools-btn" class="btn icon-btn" title="AI Tools">
+            <i class="fas fa-robot"></i>
+          </button>
+          <button
+            id="theme-toggle-btn"
+            class="btn icon-btn"
+            title="Toggle Theme"
+          >
+            <i class="fas fa-adjust"></i>
+          </button>
+          <button id="exit-editor-btn" class="btn icon-btn" title="Exit Editor">
+            <i class="fas fa-times"></i>
+          </button>
         </div>
+      </header>
 
-        <div id="section-menu" class="section-menu">
-            <button data-action="rename"><i class="fas fa-i-cursor"></i> Rename</button>
-            <button data-action="delete-label"><i class="fas fa-tag"></i> Delete Label</button>
-            <button data-action="delete-section"><i class="fas fa-trash"></i> Delete Label + Lyrics</button>
-            <button id="section-menu-close" class="section-menu-close"><i class="fas fa-times"></i></button>
-        </div>
-        
-        <button id="scroll-to-top-btn" class="icon-btn scroll-to-top-btn" title="Scroll to Top">
-            <i class="fas fa-arrow-up"></i>
+      <div id="lyrics-editor-container">
+        <div id="lyrics-display"></div>
+
+        <!-- Enhanced Copy Button with Dropdown -->
+      </div>
+
+      <div id="ai-context-menu" class="ai-context-menu">
+        <button data-action="rhyme">
+          <i class="fas fa-bullseye"></i> Rhyme
+        </button>
+        <button data-action="reword"><i class="fas fa-sync"></i> Reword</button>
+        <button data-action="rewrite">
+          <i class="fas fa-pen"></i> Rewrite
+        </button>
+        <button data-action="continue">
+          <i class="fas fa-lightbulb"></i> Continue
         </button>
+        <button id="ai-menu-close" class="ai-menu-close">
+          <i class="fas fa-times"></i>
+        </button>
+      </div>
+
+      <div id="section-menu" class="section-menu">
+        <button data-action="rename">
+          <i class="fas fa-i-cursor"></i> Rename
+        </button>
+        <button data-action="delete-label">
+          <i class="fas fa-tag"></i> Delete Label
+        </button>
+        <button data-action="delete-section">
+          <i class="fas fa-trash"></i> Delete Label + Lyrics
+        </button>
+        <button id="section-menu-close" class="section-menu-close">
+          <i class="fas fa-times"></i>
+        </button>
+      </div>
+
+      <button
+        id="scroll-to-top-btn"
+        class="icon-btn scroll-to-top-btn"
+        title="Scroll to Top"
+      >
+        <i class="fas fa-arrow-up"></i>
+      </button>
     </div>
 
     <div id="copy-modal" class="modal-overlay">
       <div class="modal">
         <h2>Copy Options</h2>
-        <button class="modal-copy-btn" data-copy-type="raw"><i class="fas fa-align-left"></i> Raw Lyrics</button>
-        <button class="modal-copy-btn" data-copy-type="chords"><i class="fas fa-guitar"></i> Lyrics + Chords</button>
-        <button class="modal-copy-btn" data-copy-type="formatted"><i class="fas fa-file-alt"></i> Full Song (Markdown)</button>
-        <button class="modal-copy-btn" data-copy-type="metadata"><i class="fas fa-info-circle"></i> Metadata Only</button>
-        <button class="modal-copy-btn" data-copy-type="download"><i class="fas fa-download"></i> Download as TXT</button>
-        <button class="close-modal-btn"><i class="fas fa-times"></i> Close</button>
+        <button class="modal-copy-btn" data-copy-type="raw">
+          <i class="fas fa-align-left"></i> Raw Lyrics
+        </button>
+        <button class="modal-copy-btn" data-copy-type="chords">
+          <i class="fas fa-guitar"></i> Lyrics + Chords
+        </button>
+        <button class="modal-copy-btn" data-copy-type="formatted">
+          <i class="fas fa-file-alt"></i> Full Song (Markdown)
+        </button>
+        <button class="modal-copy-btn" data-copy-type="metadata">
+          <i class="fas fa-info-circle"></i> Metadata Only
+        </button>
+        <button class="modal-copy-btn" data-copy-type="download">
+          <i class="fas fa-download"></i> Download as TXT
+        </button>
+        <button class="close-modal-btn">
+          <i class="fas fa-times"></i> Close
+        </button>
       </div>
     </div>
 
     <div id="editor-modal" class="modal-overlay">
       <div class="modal">
         <h2>Editor Options</h2>
-        <button id="toggle-chords-btn" class="modal-action-btn"><i class="fas fa-guitar"></i> Toggle Chords</button>
-        <button id="toggle-read-only-btn" class="modal-action-btn"><i class="fas fa-lock"></i> Performance Mode</button>
+        <button id="toggle-chords-btn" class="modal-action-btn">
+          <i class="fas fa-guitar"></i> Toggle Chords
+        </button>
+        <button id="toggle-read-only-btn" class="modal-action-btn">
+          <i class="fas fa-lock"></i> Performance Mode
+        </button>
         <div class="modal-action-btn">
-          <label for="edit-mode-select"><i class="fas fa-edit"></i> Edit Mode</label>
+          <label for="edit-mode-select"
+            ><i class="fas fa-edit"></i> Edit Mode</label
+          >
           <select id="edit-mode-select" class="modal-select">
             <option value="both">Both</option>
             <option value="lyrics">Lyrics</option>
             <option value="chords">Chords</option>
           </select>
         </div>
         <div class="modal-action-btn">
-           <i class="fas fa-bullseye"></i> Rhyme Colors   <input type="checkbox" id="rhyme-mode-toggle">
+          <i class="fas fa-bullseye"></i> Rhyme Colors
+          <input type="checkbox" id="rhyme-mode-toggle" />
         </div>
-        <button id="save-song-btn" class="modal-action-btn"><i class="fas fa-save"></i> Save Song</button>
-        <button id="copy-lyrics-btn" class="modal-action-btn"><i class="fas fa-copy"></i> Copy Options</button>
-        <button id="undo-btn" class="modal-action-btn"><i class="fas fa-undo"></i> Undo</button>
-        <button id="redo-btn" class="modal-action-btn"><i class="fas fa-redo"></i> Redo</button>
-        <button id="metadata-toggle-btn" class="modal-action-btn"><i class="fas fa-info-circle"></i> Song Metadata</button>
-        <button class="close-modal-btn"><i class="fas fa-times"></i> Close</button>
+        <button id="save-song-btn" class="modal-action-btn">
+          <i class="fas fa-save"></i> Save Song
+        </button>
+        <button id="copy-lyrics-btn" class="modal-action-btn">
+          <i class="fas fa-copy"></i> Copy Options
+        </button>
+        <button id="undo-btn" class="modal-action-btn">
+          <i class="fas fa-undo"></i> Undo
+        </button>
+        <button id="redo-btn" class="modal-action-btn">
+          <i class="fas fa-redo"></i> Redo
+        </button>
+        <button id="metadata-toggle-btn" class="modal-action-btn">
+          <i class="fas fa-info-circle"></i> Song Metadata
+        </button>
+        <button class="close-modal-btn">
+          <i class="fas fa-times"></i> Close
+        </button>
       </div>
     </div>
 
     <div id="ai-tools-modal" class="modal-overlay">
       <div class="modal">
         <h2>AI Tools</h2>
-        <textarea id="ai-additional-notes" class="ai-notes-input" placeholder="Additional notes..." rows="2"></textarea>
-        <button class="tool-option modal-action-btn" data-prompt="Generate First Draft"><i class="fas fa-magic"></i> Generate First Draft</button>
-        <button class="tool-option modal-action-btn" data-prompt="Polish Lyrics"><i class="fas fa-brush"></i> Polish Lyrics</button>
-        <button class="tool-option modal-action-btn" data-prompt="Rewrite in Different Style"><i class="fas fa-pen"></i> Rewrite in Style</button>
-        <button class="tool-option modal-action-btn" data-prompt="Continue Song"><i class="fas fa-arrow-down"></i> Continue Song</button>
-        <button class="tool-option modal-action-btn" data-prompt="Suggest Chords"><i class="fas fa-guitar"></i> Suggest Chords</button>
-        <button id="ai-format-btn" class="modal-action-btn"><i class="fas fa-broom"></i> Clean Format</button>
-        <button id="regenre-btn" class="modal-action-btn"><i class="fas fa-random"></i> Re-Genre</button>
-        <button id="ai-settings-btn" class="modal-action-btn"><i class="fas fa-cog"></i> Settings</button>
-        <button class="close-modal-btn"><i class="fas fa-times"></i> Close</button>
+        <textarea
+          id="ai-additional-notes"
+          class="ai-notes-input"
+          placeholder="Additional notes..."
+          rows="2"
+        ></textarea>
+        <button
+          class="tool-option modal-action-btn"
+          data-prompt="Generate First Draft"
+        >
+          <i class="fas fa-magic"></i> Generate First Draft
+        </button>
+        <button
+          class="tool-option modal-action-btn"
+          data-prompt="Polish Lyrics"
+        >
+          <i class="fas fa-brush"></i> Polish Lyrics
+        </button>
+        <button
+          class="tool-option modal-action-btn"
+          data-prompt="Rewrite in Different Style"
+        >
+          <i class="fas fa-pen"></i> Rewrite in Style
+        </button>
+        <button
+          class="tool-option modal-action-btn"
+          data-prompt="Continue Song"
+        >
+          <i class="fas fa-arrow-down"></i> Continue Song
+        </button>
+        <button
+          class="tool-option modal-action-btn"
+          data-prompt="Suggest Chords"
+        >
+          <i class="fas fa-guitar"></i> Suggest Chords
+        </button>
+        <button id="ai-format-btn" class="modal-action-btn">
+          <i class="fas fa-broom"></i> Clean Format
+        </button>
+        <button id="regenre-btn" class="modal-action-btn">
+          <i class="fas fa-random"></i> Re-Genre
+        </button>
+        <button id="ai-settings-btn" class="modal-action-btn">
+          <i class="fas fa-cog"></i> Settings
+        </button>
+        <button class="close-modal-btn">
+          <i class="fas fa-times"></i> Close
+        </button>
       </div>
     </div>
 
     <div id="add-section-modal" class="modal-overlay">
       <div class="modal">
         <h2>Add Section</h2>
-        <button class="modal-action-btn" data-section="[Intro]"><i class="fas fa-play"></i> Intro</button>
-        <button class="modal-action-btn" data-section="[Pre-Chorus]"><i class="fas fa-step-forward"></i> Pre-Chorus</button>
-        <button class="modal-action-btn" data-section="[Verse]"><i class="fas fa-microphone-alt"></i> Verse</button>
-        <button class="modal-action-btn" data-section="[Chorus]"><i class="fas fa-music"></i> Chorus</button>
-        <button class="modal-action-btn" data-section="[Bridge]"><i class="fas fa-link"></i> Bridge</button>
-        <button class="modal-action-btn" data-section="[Outro]"><i class="fas fa-flag-checkered"></i> Outro</button>
-        <button class="close-modal-btn"><i class="fas fa-times"></i> Close</button>
+        <button class="modal-action-btn" data-section="[Intro]">
+          <i class="fas fa-play"></i> Intro
+        </button>
+        <button class="modal-action-btn" data-section="[Pre-Chorus]">
+          <i class="fas fa-step-forward"></i> Pre-Chorus
+        </button>
+        <button class="modal-action-btn" data-section="[Verse]">
+          <i class="fas fa-microphone-alt"></i> Verse
+        </button>
+        <button class="modal-action-btn" data-section="[Chorus]">
+          <i class="fas fa-music"></i> Chorus
+        </button>
+        <button class="modal-action-btn" data-section="[Bridge]">
+          <i class="fas fa-link"></i> Bridge
+        </button>
+        <button class="modal-action-btn" data-section="[Outro]">
+          <i class="fas fa-flag-checkered"></i> Outro
+        </button>
+        <button class="close-modal-btn">
+          <i class="fas fa-times"></i> Close
+        </button>
       </div>
     </div>
 
     <!-- Metadata Panel -->
     <div id="metadata-panel" class="metadata-panel">
-        <h3>
-            Song Information
-            <button id="metadata-close-btn" class="metadata-close-btn" title="Close">
-                <i class="fas fa-times"></i>
-            </button>
-        </h3>
-        
-        <div class="metadata-editor">
-            <div class="metadata-row">
-                <label for="song-title-meta">Title:</label>
-                <input type="text" id="song-title-meta" placeholder="Song title">
-            </div>
-            
-            <div class="metadata-row">
-                <label for="song-key">Key:</label>
-                <select id="song-key">
-                    <option value="">Select Key</option>
-                    <option value="C">C</option>
-                    <option value="C#">C#</option>
-                    <option value="D">D</option>
-                    <option value="D#">D#</option>
-                    <option value="E">E</option>
-                    <option value="F">F</option>
-                    <option value="F#">F#</option>
-                    <option value="G">G</option>
-                    <option value="G#">G#</option>
-                    <option value="A">A</option>
-                    <option value="A#">A#</option>
-                    <option value="B">B</option>
-                </select>
-            </div>
-            
-            <div class="metadata-row">
-                <label for="song-tempo-meta">Tempo (BPM):</label>
-                <input type="number" id="song-tempo-meta" min="60" max="240">
-            </div>
-            
-            <div class="metadata-row">
-                <label for="song-time-signature">Time Signature:</label>
-                <select id="song-time-signature">
-                    <option value="4/4">4/4</option>
-                    <option value="3/4">3/4</option>
-                    <option value="2/4">2/4</option>
-                    <option value="6/8">6/8</option>
-                    <option value="12/8">12/8</option>
-                </select>
-            </div>
-            
-            <div class="metadata-row">
-                <label for="song-tags">Tags:</label>
-                <input type="text" id="song-tags" placeholder="rock, ballad, easy">
-                <small>Separate tags with commas</small>
-            </div>
-            
-            <div class="metadata-row">
-                <label for="song-notes">Performance Notes:</label>
-                <textarea id="song-notes" placeholder="Structure, performance notes, etc." rows="4"></textarea>
-            </div>
-            
-            <div class="metadata-row">
-                <label>Created:</label>
-                <span id="song-created" class="metadata-info"></span>
-            </div>
-            
-            <div class="metadata-row">
-                <label>Last Edited:</label>
-                <span id="song-edited-meta" class="metadata-info"></span>
-            </div>
-            
-            <div class="metadata-row">
-                <button id="export-single-song" class="btn" style="width: 100%; margin-top: 1rem;">
-                    <i class="fas fa-download"></i>
-                    Export This Song
-                </button>
-            </div>
+      <h3>
+        Song Information
+        <button
+          id="metadata-close-btn"
+          class="metadata-close-btn"
+          title="Close"
+        >
+          <i class="fas fa-times"></i>
+        </button>
+      </h3>
+
+      <div class="metadata-editor">
+        <div class="metadata-row">
+          <label for="song-title-meta">Title:</label>
+          <input type="text" id="song-title-meta" placeholder="Song title" />
         </div>
-    </div>
 
-    <div id="ai-settings-panel" class="ai-settings-panel">
-        <h3>
-            AI Settings
-            <button id="ai-settings-close" class="icon-btn" title="Close">
-                <i class="fas fa-times"></i>
-            </button>
-        </h3>
-        <div class="settings-row">
-            <label for="openrouter-api-key">API Key</label>
-            <input type="text" id="openrouter-api-key" placeholder="OpenRouter API Key">
+        <div class="metadata-row">
+          <label for="song-key">Key:</label>
+          <select id="song-key">
+            <option value="">Select Key</option>
+            <option value="C">C</option>
+            <option value="C#">C#</option>
+            <option value="D">D</option>
+            <option value="D#">D#</option>
+            <option value="E">E</option>
+            <option value="F">F</option>
+            <option value="F#">F#</option>
+            <option value="G">G</option>
+            <option value="G#">G#</option>
+            <option value="A">A</option>
+            <option value="A#">A#</option>
+            <option value="B">B</option>
+          </select>
+        </div>
+
+        <div class="metadata-row">
+          <label for="song-tempo-meta">Tempo (BPM):</label>
+          <input type="number" id="song-tempo-meta" min="60" max="240" />
         </div>
-        <div class="settings-row">
-            <label for="model-search">Model</label>
-            <input type="text" id="model-search" placeholder="Search models...">
-            <div id="model-list" class="model-list"></div>
+
+        <div class="metadata-row">
+          <label for="song-time-signature">Time Signature:</label>
+          <select id="song-time-signature">
+            <option value="4/4">4/4</option>
+            <option value="3/4">3/4</option>
+            <option value="2/4">2/4</option>
+            <option value="6/8">6/8</option>
+            <option value="12/8">12/8</option>
+          </select>
+        </div>
+
+        <div class="metadata-row">
+          <label for="song-tags">Tags:</label>
+          <input type="text" id="song-tags" placeholder="rock, ballad, easy" />
+          <small>Separate tags with commas</small>
+        </div>
+
+        <div class="metadata-row">
+          <label for="song-notes">Performance Notes:</label>
+          <textarea
+            id="song-notes"
+            placeholder="Structure, performance notes, etc."
+            rows="4"
+          ></textarea>
         </div>
-        <button id="save-ai-settings" class="modal-action-btn" style="width:100%"><i class="fas fa-save"></i> Save</button>
+
+        <div class="metadata-row">
+          <label>Created:</label>
+          <span id="song-created" class="metadata-info"></span>
+        </div>
+
+        <div class="metadata-row">
+          <label>Last Edited:</label>
+          <span id="song-edited-meta" class="metadata-info"></span>
+        </div>
+
+        <div class="metadata-row">
+          <button
+            id="export-single-song"
+            class="btn"
+            style="width: 100%; margin-top: 1rem"
+          >
+            <i class="fas fa-download"></i>
+            Export This Song
+          </button>
+        </div>
+      </div>
     </div>
 
-    <script src="../config.js"></script>
-    <script src="songs.js"></script>
-    <script src="editor.js"></script>
+    <div id="ai-settings-panel" class="ai-settings-panel">
+      <h3>
+        AI Settings
+        <button id="ai-settings-close" class="icon-btn" title="Close">
+          <i class="fas fa-times"></i>
+        </button>
+      </h3>
+      <div class="settings-row">
+        <label for="openrouter-api-key">API Key</label>
+        <input
+          type="text"
+          id="openrouter-api-key"
+          placeholder="OpenRouter API Key"
+        />
+      </div>
+      <div class="settings-row">
+        <label for="model-search">Model</label>
+        <input type="text" id="model-search" placeholder="Search models..." />
+        <div id="model-list" class="model-list"></div>
+      </div>
+      <button
+        id="save-ai-settings"
+        class="modal-action-btn"
+        style="width: 100%"
+      >
+        <i class="fas fa-save"></i> Save
+      </button>
+    </div>
 
-    <script>
-        // Additional functionality for metadata panel
-        document.addEventListener('DOMContentLoaded', () => {
-            const metadataToggleBtn = document.getElementById('metadata-toggle-btn');
-            const metadataPanel = document.getElementById('metadata-panel');
-            const metadataCloseBtn = document.getElementById('metadata-close-btn');
-            const saveBtn = document.getElementById('save-song-btn');
-            const saveStatus = document.getElementById('save-status');
-            
-            // Toggle metadata panel
-            metadataToggleBtn?.addEventListener('click', () => {
-                metadataPanel.classList.toggle('open');
-                document.getElementById('editor-modal')?.classList.remove('visible');
-            });
-            
-            metadataCloseBtn?.addEventListener('click', () => {
-                metadataPanel.classList.remove('open');
-            });
-            
-            // Manual save button
-            saveBtn?.addEventListener('click', () => {
-                if (window.app?.saveCurrentSong) {
-                    window.app.saveCurrentSong(true);
-                }
-            });
-            
-            // Close panel when clicking outside on mobile
-            document.addEventListener('click', (e) => {
-                if (window.innerWidth <= 800 && 
-                    metadataPanel.classList.contains('open') && 
-                    !metadataPanel.contains(e.target) && 
-                    !metadataToggleBtn.contains(e.target)) {
-                    metadataPanel.classList.remove('open');
-                }
-            });
+    <script defer src="/config.js"></script>
+    <script defer src="songs.js"></script>
+    <script defer src="editor.js"></script>
+    <script defer>
+      if ("serviceWorker" in navigator) {
+        window.addEventListener("load", () => {
+          navigator.serviceWorker.register("/sw.js").catch(() => {});
         });
+      }
     </script>
+
     <script>
-        if ('serviceWorker' in navigator) {
-            navigator.serviceWorker.register('/sw.js');
-        }
+      // Additional functionality for metadata panel
+      document.addEventListener("DOMContentLoaded", () => {
+        const metadataToggleBtn = document.getElementById(
+          "metadata-toggle-btn",
+        );
+        const metadataPanel = document.getElementById("metadata-panel");
+        const metadataCloseBtn = document.getElementById("metadata-close-btn");
+        const saveBtn = document.getElementById("save-song-btn");
+        const saveStatus = document.getElementById("save-status");
+
+        // Toggle metadata panel
+        metadataToggleBtn?.addEventListener("click", () => {
+          metadataPanel.classList.toggle("open");
+          document.getElementById("editor-modal")?.classList.remove("visible");
+        });
+
+        metadataCloseBtn?.addEventListener("click", () => {
+          metadataPanel.classList.remove("open");
+        });
+
+        // Manual save button
+        saveBtn?.addEventListener("click", () => {
+          if (window.app?.saveCurrentSong) {
+            window.app.saveCurrentSong(true);
+          }
+        });
+
+        // Close panel when clicking outside on mobile
+        document.addEventListener("click", (e) => {
+          if (
+            window.innerWidth <= 800 &&
+            metadataPanel.classList.contains("open") &&
+            !metadataPanel.contains(e.target) &&
+            !metadataToggleBtn.contains(e.target)
+          ) {
+            metadataPanel.classList.remove("open");
+          }
+        });
+      });
     </script>
-</body>
+  </body>
 </html>
-
diff --git a/index.html b/index.html
index b53001e02dd38dd24d1969f17ae1124b56588b79..be10e28922ac84144c2b1027b3b0bbc37fa6936c 100644
--- a/index.html
+++ b/index.html
@@ -1,114 +1,176 @@
-
-<!DOCTYPE html>
+<!doctype html>
 <html lang="en">
-<head>
-    <meta charset="UTF-8">
-    <meta name="viewport" content="width=device-width, initial-scale=1.0, viewport-fit=cover">
+  <head>
+    <meta charset="UTF-8" />
+    <meta
+      name="viewport"
+      content="width=device-width, initial-scale=1, viewport-fit=cover"
+    />
     <title>Hill Rd. Setlist Manager</title>
-    <link rel="stylesheet" href="style.css">
-    <link rel="stylesheet" href="editor/editor.css">
-    <link rel="manifest" href="manifest.json">
-    <meta name="theme-color" content="#000000">
-    <link rel="icon" href="assets/icons/icon-192x192.png">
-    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
-    <link rel="preconnect" href="https://fonts.googleapis.com">
-    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
-    <link href="https://fonts.googleapis.com/css2?family=Neonderthaw&display=swap" rel="stylesheet">
+    <link rel="stylesheet" href="style.css" />
+    <link rel="stylesheet" href="editor/editor.css" />
+    <meta
+      name="theme-color"
+      media="(prefers-color-scheme: light)"
+      content="#ffffff"
+    />
+    <meta
+      name="theme-color"
+      media="(prefers-color-scheme: dark)"
+      content="#000000"
+    />
+    <link rel="manifest" href="/manifest.json" />
+    <link rel="icon" href="/assets/favicon.svg" type="image/svg+xml" />
+    <link
+      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css"
+      rel="stylesheet"
+    />
+    <link rel="preconnect" href="https://fonts.googleapis.com" />
+    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
+    <link
+      href="https://fonts.googleapis.com/css2?family=Neonderthaw&display=swap"
+      rel="stylesheet"
+    />
     <script src="https://cdn.jsdelivr.net/npm/fuse.js@6.6.2/dist/fuse.min.js"></script>
     <script src="https://cdn.jsdelivr.net/npm/sortablejs@1.15.2/Sortable.min.js"></script>
     <script src="lib/mammoth.browser.min.js"></script>
-</head>
-<body>
-<div class="main-box">
- <header class="app-header">
-  <div class="header-top">
-    <div class="app-logo">
-  <img src="assets/images/mylogo.png" alt="App Logo" class="app-logo-img">
-</div>
-  <button id="theme-toggle-btn" class="icon-btn theme-toggle-btn" title="Toggle Light/Dark" style="position:absolute;top:1.1rem;right:1.1rem;">
-  <i class="fas fa-adjust"></i>
-</button>
-   
-  </div>
-    <nav class="app-nav" aria-label="Main tabs">
-        <button type="button" class="nav-button active" data-tab="songs" aria-label="Songs tab">
-          <i class="fas fa-book"></i> Songs
-        </button>
-        <button type="button" class="nav-button" data-tab="setlists" aria-label="Setlists tab">
-          <i class="fas fa-list"></i> Setlists
-        </button>
-        <button type="button" class="nav-button" data-tab="performance" aria-label="Performance tab">
-          <i class="fas fa-music"></i> Lyrics
-        </button>
-        <button type="button" class="nav-button" data-tab="editor" aria-label="Editor tab">
-          <i class="fas fa-pen"></i> Editor
-        </button>
-      </nav>
-<div id="tab-toolbar" class="toolbar"></div>
-</header>
-    <main id="app">
+  </head>
+  <body>
+    <a class="skip-link" href="#main">Skip to content</a>
+    <div class="main-box">
+      <header class="app-header">
+        <div class="header-top">
+          <div class="app-logo">
+            <img
+              src="assets/images/mylogo.png"
+              alt="App Logo"
+              class="app-logo-img"
+            />
+          </div>
+          <button
+            id="theme-toggle-btn"
+            class="icon-btn theme-toggle-btn"
+            title="Toggle Light/Dark"
+            style="position: absolute; top: 1.1rem; right: 1.1rem"
+          >
+            <i class="fas fa-adjust"></i>
+          </button>
+        </div>
+        <nav class="app-nav" aria-label="Main tabs">
+          <button
+            type="button"
+            class="nav-button active"
+            data-tab="songs"
+            aria-label="Songs tab"
+          >
+            <i class="fas fa-book"></i> Songs
+          </button>
+          <button
+            type="button"
+            class="nav-button"
+            data-tab="setlists"
+            aria-label="Setlists tab"
+          >
+            <i class="fas fa-list"></i> Setlists
+          </button>
+          <button
+            type="button"
+            class="nav-button"
+            data-tab="performance"
+            aria-label="Performance tab"
+          >
+            <i class="fas fa-music"></i> Lyrics
+          </button>
+          <button
+            type="button"
+            class="nav-button"
+            data-tab="editor"
+            aria-label="Editor tab"
+          >
+            <i class="fas fa-pen"></i> Editor
+          </button>
+        </nav>
+        <div id="tab-toolbar" class="toolbar"></div>
+      </header>
+      <main id="main">
         <section id="songs" class="tab active">
-            <div class="page-content songs-page">
-                <div id="song-list" class="song-list"></div>
-            </div>
+          <div class="page-content songs-page">
+            <div id="song-list" class="song-list"></div>
+          </div>
         </section>
 
         <section id="setlists" class="tab">
-            <div class="page-content setlists-page">
-                    
-                <div class="setlist-editor">
-                    <div class="column">
-                        <h3>Available Songs</h3>
-                        <div id="available-songs" class="song-container"></div>
-                    </div>
-                    <div class="column">
-                        <h3 id="current-setlist-title">Current Setlist</h3>
-                        <div id="current-setlist-songs" class="song-container"></div>
-                    </div>
-                </div>
+          <div class="page-content setlists-page">
+            <div class="setlist-editor">
+              <div class="column">
+                <h3>Available Songs</h3>
+                <div id="available-songs" class="song-container"></div>
+              </div>
+              <div class="column">
+                <h3 id="current-setlist-title">Current Setlist</h3>
+                <div id="current-setlist-songs" class="song-container"></div>
+              </div>
             </div>
+          </div>
         </section>
 
         <section id="performance" class="tab">
-            <div class="page-content performance-page">
-                <div id="performance-song-list" class="song-list"></div>
-            </div>
+          <div class="page-content performance-page">
+            <div id="performance-song-list" class="song-list"></div>
+          </div>
         </section>
 
         <section id="editor" class="tab">
-            <div class="page-content editor-page">
-                <div id="editor-mount" class="editor-mount"></div>
-            </div>
+          <div class="page-content editor-page">
+            <div id="editor-mount" class="editor-mount"></div>
+          </div>
         </section>
-    </main>
-    <div id="song-modal" class="modal">
+      </main>
+      <div id="song-modal" class="modal">
         <div class="modal-content">
-            <h2 id="song-modal-title">Add Song</h2>
-            <input type="text" id="song-title-input" placeholder="Song Title">
-            <textarea id="song-lyrics-input" placeholder="Enter lyrics..."></textarea>
-            <div class="modal-actions">
-                <button id="save-song-btn" class="btn primary" disabled>Save</button>
-                <button id="cancel-song-btn" class="btn">Cancel</button>
-            </div>
+          <h2 id="song-modal-title">Add Song</h2>
+          <input type="text" id="song-title-input" placeholder="Song Title" />
+          <textarea
+            id="song-lyrics-input"
+            placeholder="Enter lyrics..."
+          ></textarea>
+          <div class="modal-actions">
+            <button id="save-song-btn" class="btn primary" disabled>
+              Save
+            </button>
+            <button id="cancel-song-btn" class="btn">Cancel</button>
+          </div>
         </div>
-    </div>
+      </div>
 
-    <div id="setlist-modal" class="modal">
+      <div id="setlist-modal" class="modal">
         <div class="modal-content">
-            <h2 id="setlist-modal-title">New Setlist</h2>
-            <input type="text" id="setlist-name-input" placeholder="Setlist Name">
-            <div class="modal-actions">
-                <button id="save-setlist-btn" class="btn primary">Save</button>
-                <button id="cancel-setlist-btn" class="btn">Cancel</button>
-            </div>
+          <h2 id="setlist-modal-title">New Setlist</h2>
+          <input
+            type="text"
+            id="setlist-name-input"
+            placeholder="Setlist Name"
+          />
+          <div class="modal-actions">
+            <button id="save-setlist-btn" class="btn primary">Save</button>
+            <button id="cancel-setlist-btn" class="btn">Cancel</button>
+          </div>
         </div>
+      </div>
     </div>
-    </div>
-    <script src="core/song-core.js"></script>
-    <script src="script.js"></script>
+    <script defer src="/config.js"></script>
+    <script defer src="/core/song-core.js"></script>
+    <script defer src="/script.js"></script>
+    <script defer>
+      if ("serviceWorker" in navigator) {
+        window.addEventListener("load", () => {
+          navigator.serviceWorker.register("/sw.js").catch(() => {});
+        });
+      }
+    </script>
 
-    <div id="editor-mode" class="modal" style="display:none;">
+    <div id="editor-mode" class="modal" style="display: none">
       <div class="modal-content" id="editor-overlay"></div>
     </div>
-</body>
+  </body>
 </html>
diff --git a/manifest.json b/manifest.json
index b04fe2652683f3e62f3345abab4867b4837c819b..f4183306c9114f7ae14ab0270efe302a32965761 100755
--- a/manifest.json
+++ b/manifest.json
@@ -1,23 +1,33 @@
 {
-    "name": "Hill Rd. Setlist Manager",
-    "short_name": "SetlistMgr",
-    "start_url": ".",
-    "display": "standalone",
-    "background_color": "#000000",
-    "theme_color": "#000000",
-    "description": "A performance-focused lyric and setlist manager.",
-    "icons": [
-        {
-            "src": "assets/icons/icon-192x192.png",
-            "sizes": "192x192",
-            "type": "image/png"
-        },
-        {
-            "src": "assets/icons/icon-512x512.png",
-            "sizes": "512x512",
-            "type": "image/png"
-        }
-    ],
-    "orientation": "portrait"
+  "name": "Hill Rd. Setlist Manager",
+  "short_name": "SetlistMgr",
+  "start_url": "/",
+  "scope": "/",
+  "display": "standalone",
+  "background_color": "#000000",
+  "theme_color": "#000000",
+  "description": "A performance-focused lyric and setlist manager.",
+  "icons": [
+    {
+      "src": "assets/icons/icon-48x48.png",
+      "sizes": "48x48",
+      "type": "image/png"
+    },
+    {
+      "src": "assets/icons/icon-96x96.png",
+      "sizes": "96x96",
+      "type": "image/png"
+    },
+    {
+      "src": "assets/icons/icon-192x192.png",
+      "sizes": "192x192",
+      "type": "image/png"
+    },
+    {
+      "src": "assets/icons/icon-512x512.png",
+      "sizes": "512x512",
+      "type": "image/png"
+    }
+  ],
+  "orientation": "portrait"
 }
-
diff --git a/package.json b/package.json
index f7b051c1a115b694c38e336a8f945b8ac933d26c..f5163111edfb462202707d6d2945a64c0b7e79af 100644
--- a/package.json
+++ b/package.json
@@ -1,15 +1,21 @@
 {
   "name": "hill-rd-setlist",
   "version": "1.0.0",
   "description": "A **modern, touch-friendly app** for musicians to manage setlists and lyrics with zero clutter and maximum clarity. Built for band rehearsals, gigging, and performance mode.",
   "main": "script.js",
   "directories": {
     "lib": "lib"
   },
   "scripts": {
-    "test": "echo \"Error: no test specified\" && exit 1"
+    "test": "echo \"Error: no test specified\" && exit 1",
+    "format": "prettier -w \"**/*.{js,css,html,json}\"",
+    "serve": "http-server -c-1 -p 5173 ."
   },
   "keywords": [],
   "author": "",
-  "license": "ISC"
+  "license": "ISC",
+  "devDependencies": {
+    "prettier": "^3.3.3",
+    "http-server": "^14.1.1"
+  }
 }
diff --git a/performance/performance.html b/performance/performance.html
index eb06a01b9c2013a239fb82c6b5761b3ffa7db026..cd35c976a7ed683338bd36e16860530268958b3e 100644
--- a/performance/performance.html
+++ b/performance/performance.html
@@ -1,141 +1,259 @@
-<!DOCTYPE html>
+<!doctype html>
 <html lang="en">
-<head>
-    <meta charset="UTF-8">
-    <meta name="viewport" content="width=device-width, initial-scale=1.0">
+  <head>
+    <meta charset="UTF-8" />
+    <meta
+      name="viewport"
+      content="width=device-width, initial-scale=1, viewport-fit=cover"
+    />
     <title>Hill Rd. Setlist Manager - Performance Mode</title>
-    <link rel="stylesheet" href="../style.css">
-    <link rel="stylesheet" href="performance.css">
-    <link rel="icon" href="../assets/icons/icon-192x192.png">
-    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
-    <link rel="preconnect" href="https://fonts.googleapis.com">
-    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
-    <link href="https://fonts.googleapis.com/css2?family=Neonderthaw&display=swap" rel="stylesheet">
-</head>
-<body>
-    <div id="performance-mode" class="performance-mode-overlay" style="display: flex;">
-        <div class="performance-header">
-            <div id="performance-song-info" class="song-info"></div>
-            <div class="performance-controls">
-                <button id="autoscroll-settings-btn" class="icon-btn" title="Autoscroll Settings"><i class="fas fa-cog"></i></button>
-                <button id="perf-menu-btn" class="icon-btn" title="Performance Menu"><i class="fas fa-ellipsis-h"></i></button>
-                <button id="theme-toggle-btn" class="icon-btn theme-toggle-btn" title="Toggle Theme"><i class="fas fa-adjust"></i></button>
-                <button id="exit-performance-btn" class="icon-btn danger" title="Exit Performance"><i class="fas fa-times"></i></button>
-            </div>
-        </div>
-        <button id="prev-song-btn" class="nav-arrow left"><i class="fas fa-chevron-left"></i></button>
-        <button id="next-song-btn" class="nav-arrow right"><i class="fas fa-chevron-right"></i></button>
-        <div id="lyrics-display" class="lyrics-container"></div>
-        <div class="performance-footer">
-            <button id="footer-decrease-font-btn" class="icon-btn" title="Smaller Font"><i class="fas fa-minus"></i></button>
-            <span id="footer-font-size-display" style="min-width:2.2em;text-align:center;font-size:1.03em;">32px</span>
-            <button id="footer-increase-font-btn" class="icon-btn" title="Larger Font"><i class="fas fa-plus"></i></button>
+    <link rel="stylesheet" href="../style.css" />
+    <link rel="stylesheet" href="performance.css" />
+    <meta
+      name="theme-color"
+      media="(prefers-color-scheme: light)"
+      content="#ffffff"
+    />
+    <meta
+      name="theme-color"
+      media="(prefers-color-scheme: dark)"
+      content="#000000"
+    />
+    <link rel="manifest" href="/manifest.json" />
+    <link rel="icon" href="/assets/favicon.svg" type="image/svg+xml" />
+    <link
+      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css"
+      rel="stylesheet"
+    />
+    <link rel="preconnect" href="https://fonts.googleapis.com" />
+    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
+    <link
+      href="https://fonts.googleapis.com/css2?family=Neonderthaw&display=swap"
+      rel="stylesheet"
+    />
+  </head>
+  <body>
+    <div
+      id="performance-mode"
+      class="performance-mode-overlay"
+      style="display: flex"
+    >
+      <div class="performance-header">
+        <div id="performance-song-info" class="song-info"></div>
+        <div class="performance-controls">
+          <button
+            id="autoscroll-settings-btn"
+            class="icon-btn"
+            title="Autoscroll Settings"
+          >
+            <i class="fas fa-cog"></i>
+          </button>
+          <button id="perf-menu-btn" class="icon-btn" title="Performance Menu">
+            <i class="fas fa-ellipsis-h"></i>
+          </button>
+          <button
+            id="theme-toggle-btn"
+            class="icon-btn theme-toggle-btn"
+            title="Toggle Theme"
+          >
+            <i class="fas fa-adjust"></i>
+          </button>
+          <button
+            id="exit-performance-btn"
+            class="icon-btn danger"
+            title="Exit Performance"
+          >
+            <i class="fas fa-times"></i>
+          </button>
         </div>
+      </div>
+      <button id="prev-song-btn" class="nav-arrow left">
+        <i class="fas fa-chevron-left"></i>
+      </button>
+      <button id="next-song-btn" class="nav-arrow right">
+        <i class="fas fa-chevron-right"></i>
+      </button>
+      <div id="lyrics-display" class="lyrics-container"></div>
+      <div class="performance-footer">
+        <button
+          id="footer-decrease-font-btn"
+          class="icon-btn"
+          title="Smaller Font"
+        >
+          <i class="fas fa-minus"></i>
+        </button>
+        <span
+          id="footer-font-size-display"
+          style="min-width: 2.2em; text-align: center; font-size: 1.03em"
+          >32px</span
+        >
+        <button
+          id="footer-increase-font-btn"
+          class="icon-btn"
+          title="Larger Font"
+        >
+          <i class="fas fa-plus"></i>
+        </button>
+      </div>
     </div>
     <div id="autoscroll-delay-modal" class="modal">
-        <div class="modal-content">
-            <h2>Set Autoscroll Delay</h2>
-            <label id="autoscroll-delay-label" for="autoscroll-delay-slider">Delay (seconds):</label>
-            <input type="range" id="autoscroll-delay-slider" min="0" max="10" step="1">
-            <span id="autoscroll-delay-value">3s</span>
-            <label for="autoscroll-speed-slider">Speed (px/50ms):</label>
-            <input type="range" id="autoscroll-speed-slider" min="0.5" max="5" step="0.1">
-            <span id="autoscroll-speed-value">1</span>
-            <button id="close-autoscroll-delay-modal" class="btn">Save</button>
-        </div>
+      <div class="modal-content">
+        <h2>Set Autoscroll Delay</h2>
+        <label id="autoscroll-delay-label" for="autoscroll-delay-slider"
+          >Delay (seconds):</label
+        >
+        <input
+          type="range"
+          id="autoscroll-delay-slider"
+          min="0"
+          max="10"
+          step="1"
+        />
+        <span id="autoscroll-delay-value">3s</span>
+        <label for="autoscroll-speed-slider">Speed (px/50ms):</label>
+        <input
+          type="range"
+          id="autoscroll-speed-slider"
+          min="0.5"
+          max="5"
+          step="0.1"
+        />
+        <span id="autoscroll-speed-value">1</span>
+        <button id="close-autoscroll-delay-modal" class="btn">Save</button>
+      </div>
     </div>
     <!-- Floating buttons go here, outside the modal but inside <body> -->
-    <button id="scroll-to-top-btn" class="scroll-to-top-btn"><i class="fas fa-arrow-up"></i></button>
-    <button id="auto-scroll-btn" class="auto-scroll-btn"><i class="fas fa-angle-double-down"></i></button>
-
+    <button id="scroll-to-top-btn" class="scroll-to-top-btn">
+      <i class="fas fa-arrow-up"></i>
+    </button>
+    <button id="auto-scroll-btn" class="auto-scroll-btn">
+      <i class="fas fa-angle-double-down"></i>
+    </button>
 
     <!-- Performance Menu Modal -->
     <div id="performance-menu-modal" class="modal">
       <div class="modal-content">
         <h2>Performance Options</h2>
 
         <div class="modal-row">
-          <label for="perf-edit-mode"><i class="fas fa-edit"></i> Edit Mode</label>
+          <label for="perf-edit-mode"
+            ><i class="fas fa-edit"></i> Edit Mode</label
+          >
           <select id="perf-edit-mode">
             <option value="readonly">Read Only</option>
             <option value="lyrics">Lyrics Only</option>
             <option value="chords">Chords Only</option>
             <option value="both">Both</option>
           </select>
         </div>
 
         <div class="modal-row">
-          <label for="perf-chord-mode"><i class="fas fa-guitar"></i> Chord Mode</label>
+          <label for="perf-chord-mode"
+            ><i class="fas fa-guitar"></i> Chord Mode</label
+          >
           <select id="perf-chord-mode">
             <option value="off">Off</option>
             <option value="lyrics">Lyrics Only</option>
             <option value="chords">Chords Only</option>
             <option value="both" selected>Both</option>
           </select>
         </div>
 
         <div class="modal-row">
-          <button id="perf-normalize-btn" class="btn"><i class="fas fa-broom"></i> Normalize Lyrics</button>
+          <button id="perf-normalize-btn" class="btn">
+            <i class="fas fa-broom"></i> Normalize Lyrics
+          </button>
         </div>
 
         <div class="modal-row">
-          <button id="perf-metadata-btn" class="btn"><i class="fas fa-info-circle"></i> Song Info</button>
+          <button id="perf-metadata-btn" class="btn">
+            <i class="fas fa-info-circle"></i> Song Info
+          </button>
         </div>
 
-        <button id="perf-menu-close" class="btn"><i class="fas fa-times"></i> Close</button>
+        <button id="perf-menu-close" class="btn">
+          <i class="fas fa-times"></i> Close
+        </button>
       </div>
     </div>
 
     <!-- Metadata Panel/Modal -->
     <div id="perf-metadata-modal" class="modal">
       <div class="modal-content">
         <h2>Song Information</h2>
 
         <div class="metadata-row">
           <label for="perf-key">Key:</label>
           <select id="perf-key">
             <option value="">Select Key</option>
-            <option>C</option><option>C#</option><option>D</option><option>D#</option>
-            <option>E</option><option>F</option><option>F#</option><option>G</option>
-            <option>G#</option><option>A</option><option>A#</option><option>B</option>
+            <option>C</option>
+            <option>C#</option>
+            <option>D</option>
+            <option>D#</option>
+            <option>E</option>
+            <option>F</option>
+            <option>F#</option>
+            <option>G</option>
+            <option>G#</option>
+            <option>A</option>
+            <option>A#</option>
+            <option>B</option>
           </select>
         </div>
 
         <div class="metadata-row">
           <label for="perf-tempo">Tempo (BPM):</label>
-          <input type="number" id="perf-tempo" min="40" max="260">
+          <input type="number" id="perf-tempo" min="40" max="260" />
         </div>
 
         <div class="metadata-row">
           <label for="perf-ts">Time Signature:</label>
           <select id="perf-ts">
-            <option>4/4</option><option>3/4</option><option>2/4</option>
-            <option>6/8</option><option>12/8</option>
+            <option>4/4</option>
+            <option>3/4</option>
+            <option>2/4</option>
+            <option>6/8</option>
+            <option>12/8</option>
           </select>
         </div>
 
         <div class="metadata-row">
           <label for="perf-tags">Tags:</label>
-          <input type="text" id="perf-tags" placeholder="rock, ballad, easy">
+          <input type="text" id="perf-tags" placeholder="rock, ballad, easy" />
         </div>
 
         <div class="metadata-row">
           <label for="perf-notes">Performance Notes:</label>
-          <textarea id="perf-notes" rows="4" placeholder="Cues, capo, structure, etc."></textarea>
+          <textarea
+            id="perf-notes"
+            rows="4"
+            placeholder="Cues, capo, structure, etc."
+          ></textarea>
         </div>
 
         <div class="meta-actions">
-          <button id="perf-metadata-save" class="btn"><i class="fas fa-save"></i> Save</button>
-          <button id="perf-metadata-close" class="btn"><i class="fas fa-times"></i> Close</button>
+          <button id="perf-metadata-save" class="btn">
+            <i class="fas fa-save"></i> Save
+          </button>
+          <button id="perf-metadata-close" class="btn">
+            <i class="fas fa-times"></i> Close
+          </button>
         </div>
       </div>
     </div>
 
-    
-    <script src="../lib/fuse.js"></script>
-    <script src="../lib/idb.min.js"></script>
-    <script src="../lib/mammoth.browser.min.js"></script>
-    <script src="performance.js"></script>
-</body>
+    <script defer src="/config.js"></script>
+    <script defer src="../core/song-core.js"></script>
+    <script defer src="../lib/fuse.js"></script>
+    <script defer src="../lib/idb.min.js"></script>
+    <script defer src="../lib/mammoth.browser.min.js"></script>
+    <script defer src="performance.js"></script>
+    <script defer>
+      if ("serviceWorker" in navigator) {
+        window.addEventListener("load", () => {
+          navigator.serviceWorker.register("/sw.js").catch(() => {});
+        });
+      }
+    </script>
+  </body>
 </html>
-
diff --git a/script.js b/script.js
index 406d5d0ee3dfa1b1f59f6977d5579894a0229038..90fb5f96c24be545949a8ddcc7973b4995d23fbd 100755
--- a/script.js
+++ b/script.js
@@ -1,1050 +1,1227 @@
-// ==== THEME HANDLING ====
-document.addEventListener('DOMContentLoaded', function() {
-    // Initialize theme
-    const savedTheme = localStorage.getItem('theme');
-    if (!savedTheme) {
-        localStorage.setItem('theme', 'dark');
-        document.documentElement.dataset.theme = 'dark';
-    } else {
-        document.documentElement.dataset.theme = savedTheme;
+"use strict";
+window.App = window.App || {};
+App.Store = {
+  get(k, d = null) {
+    try {
+      const v = localStorage.getItem(k);
+      return v ? JSON.parse(v) : d;
+    } catch {
+      return d;
+    }
+  },
+  set(k, v) {
+    try {
+      localStorage.setItem(k, JSON.stringify(v));
+    } catch {
+      /* no-op */
+    }
+  },
+  migrate() {
+    const v = App.Store.get(App.Config.STORAGE.VERSION, "0");
+    if (v !== App.Config.VERSION) {
+      App.Store.set(App.Config.STORAGE.VERSION, App.Config.VERSION);
     }
+  },
+};
+document.addEventListener("DOMContentLoaded", () => App.Store.migrate(), {
+  once: true,
+});
+
+// ==== THEME HANDLING ====
+document.addEventListener("DOMContentLoaded", function () {
+  // Initialize theme
+  const savedTheme = localStorage.getItem("theme");
+  if (!savedTheme) {
+    localStorage.setItem("theme", "dark");
+    document.documentElement.dataset.theme = "dark";
+  } else {
+    document.documentElement.dataset.theme = savedTheme;
+  }
 });
 
 // ---- Lazy-loaded Editor integration ----
 let editorLoaded = false;
 function ensureEditorLoaded(openOverlay = false, initialSongId = null) {
-    if (editorLoaded) {
-        if (openOverlay) openEditor(initialSongId);
-        return;
-    }
-    const s = document.createElement('script');
-    s.src = 'editor.js';
-    s.onload = () => {
-        editorLoaded = true;
-        window.Editor?.init?.({
-            core: window.SongCore,
-            getSongs: () => JSON.parse(localStorage.getItem('songs') || '[]'),
-            setSongs: (songs) => localStorage.setItem('songs', JSON.stringify(songs || [])),
-            onSongSaved: (song) => {
-                if (typeof window.app?.renderSongs === 'function') window.app.renderSongs();
-            }
-        });
-        if (openOverlay) openEditor(initialSongId);
-    };
-    document.head.appendChild(s);
+  if (editorLoaded) {
+    if (openOverlay) openEditor(initialSongId);
+    return;
+  }
+  const s = document.createElement("script");
+  s.src = "editor.js";
+  s.onload = () => {
+    editorLoaded = true;
+    window.Editor?.init?.({
+      core: window.SongCore,
+      getSongs: () => JSON.parse(localStorage.getItem("songs") || "[]"),
+      setSongs: (songs) =>
+        localStorage.setItem("songs", JSON.stringify(songs || [])),
+      onSongSaved: (song) => {
+        if (typeof window.app?.renderSongs === "function")
+          window.app.renderSongs();
+      },
+    });
+    if (openOverlay) openEditor(initialSongId);
+  };
+  document.head.appendChild(s);
 }
 
 function openEditor(songId = null) {
-    const host = document.getElementById('editor-overlay');
-    const modal = document.getElementById('editor-mode');
-    modal.style.display = 'flex';
-    window.Editor?.open?.({
-        container: host,
-        songId,
-    });
-
-    const esc = (e) => { if (e.key === 'Escape') { closeEditor(); } };
-    document.addEventListener('keydown', esc, { once: true });
-    modal.addEventListener('click', (e) => {
-        if (e.target === modal) closeEditor();
-    }, { once: true });
+  const host = document.getElementById("editor-overlay");
+  const modal = document.getElementById("editor-mode");
+  modal.style.display = "flex";
+  window.Editor?.open?.({
+    container: host,
+    songId,
+  });
+
+  const esc = (e) => {
+    if (e.key === "Escape") {
+      closeEditor();
+    }
+  };
+  document.addEventListener("keydown", esc, { once: true });
+  modal.addEventListener(
+    "click",
+    (e) => {
+      if (e.target === modal) closeEditor();
+    },
+    { once: true },
+  );
 }
 
 function closeEditor() {
-    const modal = document.getElementById('editor-mode');
-    modal.style.display = 'none';
-    window.Editor?.teardown?.();
+  const modal = document.getElementById("editor-mode");
+  modal.style.display = "none";
+  window.Editor?.teardown?.();
 }
 
-// ==== SETLIST MANAGER MODULE 
+// ==== SETLIST MANAGER MODULE
 function normalizeSetlistName(name) {
-    return name.replace(/\.[^/.]+$/, '')  // Remove file extension
-        .replace(/[_\-]+/g, ' ')
-        .replace(/[^\w\s]/g, '')
-        .replace(/\s+/g, ' ')
-        .trim()
-        .toLowerCase()
-        .replace(/\b\w/g, c => c.toUpperCase());
+  return name
+    .replace(/\.[^/.]+$/, "") // Remove file extension
+    .replace(/[_\-]+/g, " ")
+    .replace(/[^\w\s]/g, "")
+    .replace(/\s+/g, " ")
+    .trim()
+    .toLowerCase()
+    .replace(/\b\w/g, (c) => c.toUpperCase());
 }
 
 const SetlistsManager = (() => {
-    let setlists = new Map();
-    const DB_KEY = 'setlists';
-
-    function load() {
-        try {
-            const raw = localStorage.getItem(DB_KEY);
-            if (raw) {
-                const arr = JSON.parse(raw);
-                setlists = new Map(arr.map(obj => [obj.id, obj]));
-            }
-        } catch (error) {
-            setlists = new Map();
-        }
-    }
-
-    function save() {
-        localStorage.setItem(DB_KEY, JSON.stringify(Array.from(setlists.values())));
-    }
-
-    function getAllSetlists() {
-        return Array.from(setlists.values()).sort((a, b) => a.name.localeCompare(b.name));
-    }
-
-    function getSetlistById(id) {
-        return setlists.get(id) || null;
-    }
-
-    function addSetlist(name, songIds = []) {
-        const normalized = normalizeSetlistName(name);
-        const existing = Array.from(setlists.values()).find(s => 
-            s.name.toLowerCase() === normalized.toLowerCase()
-        );
-        let finalName = normalized;
-        if (existing) {
-            let counter = 1;
-            while (Array.from(setlists.values()).find(s => 
-                s.name.toLowerCase() === `${normalized} (${counter})`.toLowerCase()
-            )) { counter++; }
-            finalName = `${normalized} (${counter})`;
-        }
-        const setlist = {
-            id: (Date.now().toString() + Math.random().toString(16).slice(2)), 
-            name: finalName,
-            songs: [...songIds],
-            createdAt: Date.now(),
-            updatedAt: Date.now()
-        };
-        setlists.set(setlist.id, setlist);
-        save();
-        return setlist;
-    }
-
-    function renameSetlist(id, newName) {
-        const setlist = setlists.get(id);
-        if (setlist) {
-            const normalized = normalizeSetlistName(newName);
-            const existing = Array.from(setlists.values()).find(s => 
-                s.id !== id && s.name.toLowerCase() === normalized.toLowerCase()
-            );
-            if (existing) throw new Error(`A setlist named "${normalized}" already exists`);
-            setlist.name = newName.trim();
-            setlist.updatedAt = Date.now();
-            save();
-            return setlist;
-        }
-        return null;
-    }
+  let setlists = new Map();
+  const DB_KEY = "setlists";
 
-    function duplicateSetlist(id) {
-        const orig = getSetlistById(id);
-        if (orig) return addSetlist(orig.name + ' Copy', orig.songs);
-        return null;
+  function load() {
+    try {
+      const raw = localStorage.getItem(DB_KEY);
+      if (raw) {
+        const arr = JSON.parse(raw);
+        setlists = new Map(arr.map((obj) => [obj.id, obj]));
+      }
+    } catch (error) {
+      setlists = new Map();
     }
-
-    function deleteSetlist(id) {
-        const deleted = setlists.delete(id);
-        if (deleted) save();
-        return deleted;
+  }
+
+  function save() {
+    localStorage.setItem(DB_KEY, JSON.stringify(Array.from(setlists.values())));
+  }
+
+  function getAllSetlists() {
+    return Array.from(setlists.values()).sort((a, b) =>
+      a.name.localeCompare(b.name),
+    );
+  }
+
+  function getSetlistById(id) {
+    return setlists.get(id) || null;
+  }
+
+  function addSetlist(name, songIds = []) {
+    const normalized = normalizeSetlistName(name);
+    const existing = Array.from(setlists.values()).find(
+      (s) => s.name.toLowerCase() === normalized.toLowerCase(),
+    );
+    let finalName = normalized;
+    if (existing) {
+      let counter = 1;
+      while (
+        Array.from(setlists.values()).find(
+          (s) =>
+            s.name.toLowerCase() === `${normalized} (${counter})`.toLowerCase(),
+        )
+      ) {
+        counter++;
+      }
+      finalName = `${normalized} (${counter})`;
     }
-
-    function updateSetlistSongs(id, songIds) {
-        const setlist = setlists.get(id);
-        if (setlist) {
-            setlist.songs = [...songIds];
-            setlist.updatedAt = Date.now();
-            save();
-            return setlist;
-        }
-        return null;
+    const setlist = {
+      id: Date.now().toString() + Math.random().toString(16).slice(2),
+      name: finalName,
+      songs: [...songIds],
+      createdAt: Date.now(),
+      updatedAt: Date.now(),
+    };
+    setlists.set(setlist.id, setlist);
+    save();
+    return setlist;
+  }
+
+  function renameSetlist(id, newName) {
+    const setlist = setlists.get(id);
+    if (setlist) {
+      const normalized = normalizeSetlistName(newName);
+      const existing = Array.from(setlists.values()).find(
+        (s) => s.id !== id && s.name.toLowerCase() === normalized.toLowerCase(),
+      );
+      if (existing)
+        throw new Error(`A setlist named "${normalized}" already exists`);
+      setlist.name = newName.trim();
+      setlist.updatedAt = Date.now();
+      save();
+      return setlist;
     }
-
-    function addSongToSetlist(setlistId, songId) {
-        const setlist = setlists.get(setlistId);
-        if (setlist && !setlist.songs.includes(songId)) {
-            setlist.songs.push(songId);
-            setlist.updatedAt = Date.now();
-            save();
-            return setlist;
-        }
-        return null;
+    return null;
+  }
+
+  function duplicateSetlist(id) {
+    const orig = getSetlistById(id);
+    if (orig) return addSetlist(orig.name + " Copy", orig.songs);
+    return null;
+  }
+
+  function deleteSetlist(id) {
+    const deleted = setlists.delete(id);
+    if (deleted) save();
+    return deleted;
+  }
+
+  function updateSetlistSongs(id, songIds) {
+    const setlist = setlists.get(id);
+    if (setlist) {
+      setlist.songs = [...songIds];
+      setlist.updatedAt = Date.now();
+      save();
+      return setlist;
     }
-
-    function removeSongFromSetlist(setlistId, songId) {
-        const setlist = setlists.get(setlistId);
-        if (setlist) {
-            const index = setlist.songs.indexOf(songId);
-            if (index > -1) {
-                setlist.songs.splice(index, 1);
-                setlist.updatedAt = Date.now();
-                save();
-                return setlist;
-            }
-        }
-        return null;
+    return null;
+  }
+
+  function addSongToSetlist(setlistId, songId) {
+    const setlist = setlists.get(setlistId);
+    if (setlist && !setlist.songs.includes(songId)) {
+      setlist.songs.push(songId);
+      setlist.updatedAt = Date.now();
+      save();
+      return setlist;
     }
-
-    function moveSongInSetlist(setlistId, songId, direction) {
-        const setlist = setlists.get(setlistId);
-        if (!setlist) return null;
-        const currentIndex = setlist.songs.indexOf(songId);
-        if (currentIndex === -1) return null;
-        const newIndex = currentIndex + direction;
-        if (newIndex < 0 || newIndex >= setlist.songs.length) return null;
-        [setlist.songs[currentIndex], setlist.songs[newIndex]] = 
-        [setlist.songs[newIndex], setlist.songs[currentIndex]];
+    return null;
+  }
+
+  function removeSongFromSetlist(setlistId, songId) {
+    const setlist = setlists.get(setlistId);
+    if (setlist) {
+      const index = setlist.songs.indexOf(songId);
+      if (index > -1) {
+        setlist.songs.splice(index, 1);
         setlist.updatedAt = Date.now();
         save();
         return setlist;
+      }
     }
-
-   function importSetlistFromText(name, text, allSongs) {
+    return null;
+  }
+
+  function moveSongInSetlist(setlistId, songId, direction) {
+    const setlist = setlists.get(setlistId);
+    if (!setlist) return null;
+    const currentIndex = setlist.songs.indexOf(songId);
+    if (currentIndex === -1) return null;
+    const newIndex = currentIndex + direction;
+    if (newIndex < 0 || newIndex >= setlist.songs.length) return null;
+    [setlist.songs[currentIndex], setlist.songs[newIndex]] = [
+      setlist.songs[newIndex],
+      setlist.songs[currentIndex],
+    ];
+    setlist.updatedAt = Date.now();
+    save();
+    return setlist;
+  }
+
+  function importSetlistFromText(name, text, allSongs) {
     // Normalize and trim setlist name
     const normalizedName = name.trim();
     if (!normalizedName) {
-        alert("Setlist name cannot be empty.");
-        return null;
+      alert("Setlist name cannot be empty.");
+      return null;
     }
 
     // Use Fuse for fuzzy matching
     const fuse = new Fuse(allSongs, {
-        keys: ['title'],
-        threshold: 0.4,
-        includeScore: true,
+      keys: ["title"],
+      threshold: 0.4,
+      includeScore: true,
     });
 
     // Split text into lines and clean up
-    const titles = text.split('\n')
-        .map(line => line.trim().replace(/^\d+[\).\:\-]?\s*/, ''))  // Strip "1.", "2)", etc.
-        .filter(line => line.length > 0);
+    const titles = text
+      .split("\n")
+      .map((line) => line.trim().replace(/^\d+[\).\:\-]?\s*/, "")) // Strip "1.", "2)", etc.
+      .filter((line) => line.length > 0);
 
     const songIds = [];
     const notFound = [];
 
-    titles.forEach(title => {
-        const results = fuse.search(title);
-        if (results.length && results[0].score <= 0.5) {
-            songIds.push(results[0].item.id);
-        } else {
-            notFound.push(title);
-        }
+    titles.forEach((title) => {
+      const results = fuse.search(title);
+      if (results.length && results[0].score <= 0.5) {
+        songIds.push(results[0].item.id);
+      } else {
+        notFound.push(title);
+      }
     });
 
     if (songIds.length === 0) {
-        alert("No matching songs found to import.");
-        return null;
+      alert("No matching songs found to import.");
+      return null;
     }
 
     // Add setlist with fuzzy matched songs
     let setlist;
     try {
-        setlist = SetlistsManager.addSetlist(normalizedName, songIds);
+      setlist = SetlistsManager.addSetlist(normalizedName, songIds);
     } catch (err) {
-        alert(err.message || "Failed to create setlist.");
-        return null;
+      alert(err.message || "Failed to create setlist.");
+      return null;
     }
 
     // Notify user of any missing songs
     if (notFound.length > 0) {
-        alert(`The following songs were not found and were not imported:\n- ${notFound.join('\n- ')}`);
+      alert(
+        `The following songs were not found and were not imported:\n- ${notFound.join("\n- ")}`,
+      );
     }
 
     return { setlist, imported: songIds.length, notFound };
-}
-
-
-    function exportSetlist(setlistId, allSongs, format = 'json') {
-        const setlist = getSetlistById(setlistId);
-        if (!setlist) return null;
-        const songs = setlist.songs
-            .map(songId => allSongs.find(s => s.id === songId))
-            .filter(song => song !== undefined);
-        switch (format) {
-            case 'json':
-                return JSON.stringify({ setlist, songs }, null, 2);
-            case 'txt':
-                return songs.map(song => song.title).join('\n');
-            case 'csv':
-                const header = 'Title,Lyrics\n';
-                const rows = songs.map(song => 
-                    `"${song.title.replace(/"/g, '""')}","${song.lyrics.replace(/"/g, '""')}"`
-                ).join('\n');
-                return header + rows;
-            default:
-                return null;
-        }
+  }
+
+  function exportSetlist(setlistId, allSongs, format = "json") {
+    const setlist = getSetlistById(setlistId);
+    if (!setlist) return null;
+    const songs = setlist.songs
+      .map((songId) => allSongs.find((s) => s.id === songId))
+      .filter((song) => song !== undefined);
+    switch (format) {
+      case "json":
+        return JSON.stringify({ setlist, songs }, null, 2);
+      case "txt":
+        return songs.map((song) => song.title).join("\n");
+      case "csv":
+        const header = "Title,Lyrics\n";
+        const rows = songs
+          .map(
+            (song) =>
+              `"${song.title.replace(/"/g, '""')}","${song.lyrics.replace(/"/g, '""')}"`,
+          )
+          .join("\n");
+        return header + rows;
+      default:
+        return null;
     }
-
-    load();
-
-    return {
-        getAllSetlists,
-        getSetlistById,
-        addSetlist,
-        renameSetlist,
-        duplicateSetlist,
-        deleteSetlist,
-        updateSetlistSongs,
-        addSongToSetlist,
-        removeSongFromSetlist,
-        moveSongInSetlist,
-        importSetlistFromText,
-        exportSetlist,
-        load,
-        save,
-    };
+  }
+
+  load();
+
+  return {
+    getAllSetlists,
+    getSetlistById,
+    addSetlist,
+    renameSetlist,
+    duplicateSetlist,
+    deleteSetlist,
+    updateSetlistSongs,
+    addSongToSetlist,
+    removeSongFromSetlist,
+    moveSongInSetlist,
+    importSetlistFromText,
+    exportSetlist,
+    load,
+    save,
+  };
 })();
 
-document.addEventListener('DOMContentLoaded', () => {
-    const app = {
-        normalizeTitle(title) {
-            let t = title.replace(/\.[^/.]+$/, '');
-            t = t.replace(/[_\-]+/g, ' ');
-            t = t.replace(/\s+/g, ' ').trim();
-            t = t.replace(/([a-z])([A-Z])/g, '$1 $2');
-            t = t.replace(/\w\S*/g, (w) =>
-                w.charAt(0).toUpperCase() + w.slice(1).toLowerCase()
-            );
-            return t;
-        },
-
-        isDuplicateTitle(title) {
-            const normalized = title.trim().toLowerCase();
-            return this.songs.some(song => song.title.trim().toLowerCase() === normalized);
-        },
-
-        // DOM Elements
-        navButtons: document.querySelectorAll('.nav-button'),
-        tabs: document.querySelectorAll('.tab'),
-        songList: document.getElementById('song-list'),
-        addSongBtn: document.getElementById('add-song-btn'),
-        deleteAllSongsBtn: document.getElementById('delete-all-songs-btn'),
-        songModal: document.getElementById('song-modal'),
-        songModalTitle: document.getElementById('song-modal-title'),
-        saveSongBtn: document.getElementById('save-song-btn'),
-        cancelSongBtn: document.getElementById('cancel-song-btn'),
-        songTitleInput: document.getElementById('song-title-input'),
-        songLyricsInput: document.getElementById('song-lyrics-input'),
-        songSearchInput: document.getElementById('song-search-input'),
-        songUploadInput: document.getElementById('song-upload-input'),
-        setlistSelect: document.getElementById('setlist-select'),
-        newSetlistBtn: document.getElementById('new-setlist-btn'),
-        renameSetlistBtn: document.getElementById('rename-setlist-btn'),
-        duplicateSetlistBtn: document.getElementById('duplicate-setlist-btn'),
-        deleteSetlistBtn: document.getElementById('delete-setlist-btn'),
-        availableSongsContainer: document.getElementById('available-songs'),
-        currentSetlistSongsContainer: document.getElementById('current-setlist-songs'),
-        currentSetlistTitle: document.getElementById('current-setlist-title'),
-        setlistModal: document.getElementById('setlist-modal'),
-        setlistModalTitle: document.getElementById('setlist-modal-title'),
-        setlistNameInput: document.getElementById('setlist-name-input'),
-        saveSetlistBtn: document.getElementById('save-setlist-btn'),
-        cancelSetlistBtn: document.getElementById('cancel-setlist-btn'),
-        performanceSetlistSelect: document.getElementById('performance-setlist-select'),
-        performanceSongSearch: document.getElementById('performance-song-search'),
-        startPerformanceBtn: document.getElementById('start-performance-btn'),
-        performanceSongList: document.getElementById('performance-song-list'),
-
-        // Tab Toolbars
-        tabToolbars: {
-            songs: `
+document.addEventListener("DOMContentLoaded", () => {
+  const app = {
+    normalizeTitle(title) {
+      let t = title.replace(/\.[^/.]+$/, "");
+      t = t.replace(/[_\-]+/g, " ");
+      t = t.replace(/\s+/g, " ").trim();
+      t = t.replace(/([a-z])([A-Z])/g, "$1 $2");
+      t = t.replace(
+        /\w\S*/g,
+        (w) => w.charAt(0).toUpperCase() + w.slice(1).toLowerCase(),
+      );
+      return t;
+    },
+
+    isDuplicateTitle(title) {
+      const normalized = title.trim().toLowerCase();
+      return this.songs.some(
+        (song) => song.title.trim().toLowerCase() === normalized,
+      );
+    },
+
+    // DOM Elements
+    navButtons: document.querySelectorAll(".nav-button"),
+    tabs: document.querySelectorAll(".tab"),
+    songList: document.getElementById("song-list"),
+    addSongBtn: document.getElementById("add-song-btn"),
+    deleteAllSongsBtn: document.getElementById("delete-all-songs-btn"),
+    songModal: document.getElementById("song-modal"),
+    songModalTitle: document.getElementById("song-modal-title"),
+    saveSongBtn: document.getElementById("save-song-btn"),
+    cancelSongBtn: document.getElementById("cancel-song-btn"),
+    songTitleInput: document.getElementById("song-title-input"),
+    songLyricsInput: document.getElementById("song-lyrics-input"),
+    songSearchInput: document.getElementById("song-search-input"),
+    songUploadInput: document.getElementById("song-upload-input"),
+    setlistSelect: document.getElementById("setlist-select"),
+    newSetlistBtn: document.getElementById("new-setlist-btn"),
+    renameSetlistBtn: document.getElementById("rename-setlist-btn"),
+    duplicateSetlistBtn: document.getElementById("duplicate-setlist-btn"),
+    deleteSetlistBtn: document.getElementById("delete-setlist-btn"),
+    availableSongsContainer: document.getElementById("available-songs"),
+    currentSetlistSongsContainer: document.getElementById(
+      "current-setlist-songs",
+    ),
+    currentSetlistTitle: document.getElementById("current-setlist-title"),
+    setlistModal: document.getElementById("setlist-modal"),
+    setlistModalTitle: document.getElementById("setlist-modal-title"),
+    setlistNameInput: document.getElementById("setlist-name-input"),
+    saveSetlistBtn: document.getElementById("save-setlist-btn"),
+    cancelSetlistBtn: document.getElementById("cancel-setlist-btn"),
+    performanceSetlistSelect: document.getElementById(
+      "performance-setlist-select",
+    ),
+    performanceSongSearch: document.getElementById("performance-song-search"),
+    startPerformanceBtn: document.getElementById("start-performance-btn"),
+    performanceSongList: document.getElementById("performance-song-list"),
+
+    // Tab Toolbars
+    tabToolbars: {
+      songs: `
                 <input type="text" id="song-search-input" class="search-input" placeholder="Search songs...">
                 <div class="toolbar-buttons-group">
                     <button id="add-song-btn" class="btn"><i class="fas fa-plus"></i></button>
                     <button id="delete-all-songs-btn" class="btn danger"><i class="fas fa-trash"></i></button>
                     <label for="song-upload-input" class="btn"><i class="fas fa-upload"></i></label>
                 </div>
                 <input type="file" id="song-upload-input" multiple accept=".txt,.docx" class="hidden-file">
             `,
-            setlists: `
+      setlists: `
                 <select id="setlist-select" class="setlist-select"></select>
                 <div class="toolbar-buttons-group">
                     <button id="new-setlist-btn" class="btn" title="New Setlist"><i class="fas fa-plus"></i></button>
                     <button id="rename-setlist-btn" class="btn" title="Rename"><i class="fas fa-pen"></i></button>
                     <button id="duplicate-setlist-btn" class="btn" title="Duplicate"><i class="fas fa-copy"></i></button>
                     <button id="delete-setlist-btn" class="btn danger" title="Delete"><i class="fas fa-trash"></i></button>
                     <button id="import-setlist-btn" class="btn" title="Import"><i class="fas fa-file-import"></i></button>
                     <button id="export-setlist-btn" class="btn" title="Export"><i class="fas fa-file-export"></i></button>
                 </div>
                 <input type="file" id="import-setlist-file" accept=".txt,.docx" class="hidden-file">
             `,
-            performance: `
+      performance: `
                 <select id="performance-setlist-select" class="setlist-select"></select>
                 <input type="text" id="performance-song-search" class="search-input" placeholder="Find any song...">
                 <button id="start-performance-btn" class="btn primary"><i class="fas fa-play"></i> Start</button>
             `,
-            editor: `
+      editor: `
                 <button id="new-song-in-editor" class="btn"><i class="fas fa-plus"></i> New</button>
                 <button id="open-selected-in-editor" class="btn"><i class="fas fa-pen"></i> Edit Selected</button>
-            `
-        },
+            `,
+    },
+
+    // State
+    songs: [],
+    currentSongId: null,
+    currentSetlistId: null,
+    performanceSetlistId: null,
+    modalMode: null,
+    sortableSetlist: null,
+    lastPerformance: null,
+
+    // Render the toolbar for the given tab and attach event listeners
+    renderToolbar(tab) {
+      const toolbarDiv = document.getElementById("tab-toolbar");
+      if (!toolbarDiv) {
+        console.error("Tab toolbar element not found");
+        return;
+      }
+      toolbarDiv.innerHTML = this.tabToolbars[tab] || "";
 
-        // State
-        songs: [],
-        currentSongId: null,
-        currentSetlistId: null,
-        performanceSetlistId: null,
-        modalMode: null,
-        sortableSetlist: null,
-        lastPerformance: null,
-
-        // Render the toolbar for the given tab and attach event listeners
-        renderToolbar(tab) {
-            const toolbarDiv = document.getElementById('tab-toolbar');
-            if (!toolbarDiv) {
-                console.error('Tab toolbar element not found');
-                return;
-            }
-            toolbarDiv.innerHTML = this.tabToolbars[tab] || '';
-            
-            if (tab === 'setlists' || tab === 'performance') {
-                this.setlistSelect = document.getElementById('setlist-select');
-                this.performanceSetlistSelect = document.getElementById('performance-setlist-select');
-            }
+      if (tab === "setlists" || tab === "performance") {
+        this.setlistSelect = document.getElementById("setlist-select");
+        this.performanceSetlistSelect = document.getElementById(
+          "performance-setlist-select",
+        );
+      }
 
-            if (tab === 'songs') {
-                this.songSearchInput = document.getElementById('song-search-input');
-                this.addSongBtn = document.getElementById('add-song-btn');
-                this.deleteAllSongsBtn = document.getElementById('delete-all-songs-btn');
-                this.songUploadInput = document.getElementById('song-upload-input');
-
-                this.songSearchInput.addEventListener('input', () => this.renderSongs());
-                this.addSongBtn.addEventListener('click', () => this.openSongModal());
-                this.deleteAllSongsBtn.addEventListener('click', () => {
-                    if (confirm('Delete ALL songs? This cannot be undone!')) {
-                        this.songs = [];
-                        this.saveData();
-                        this.renderSongs();
-                    }
-                });
-                this.songUploadInput.addEventListener('change', (e) => this.handleFileUpload(e));
-            } else if (tab === 'setlists') {
-                this.setlistSelect = document.getElementById('setlist-select');
-                this.newSetlistBtn = document.getElementById('new-setlist-btn');
-                this.renameSetlistBtn = document.getElementById('rename-setlist-btn');
-                this.duplicateSetlistBtn = document.getElementById('duplicate-setlist-btn');
-                this.deleteSetlistBtn = document.getElementById('delete-setlist-btn');
-                this.setlistSelect.addEventListener('change', (e) => this.handleSetlistSelectChange(e));
-                this.newSetlistBtn.addEventListener('click', () => this.openSetlistModal());
-                this.renameSetlistBtn.addEventListener('click', () => this.openSetlistModal('rename'));
-                this.duplicateSetlistBtn.addEventListener('click', () => this.handleDuplicateSetlist());
-                this.deleteSetlistBtn.addEventListener('click', () => this.handleDeleteSetlist());
-                document.getElementById('import-setlist-btn').addEventListener('click', () => {
-                    document.getElementById('import-setlist-file').click();
-                });
-                document.getElementById('export-setlist-btn').addEventListener('click', () => {
-                    if (!this.currentSetlistId) {
-                        alert("No setlist selected!");
-                        return;
-                    }
-                    const format = prompt("Export format? (json/txt/csv)", "json");
-                    if (!format) return;
-                    const content = SetlistsManager.exportSetlist(
-                        this.currentSetlistId,
-                        this.songs,
-                        format.trim().toLowerCase()
-                    );
-                    if (content) {
-                        let ext = format === "csv" ? "csv" : format === "txt" ? "txt" : "json";
-                        const setlist = SetlistsManager.getSetlistById(this.currentSetlistId);
-                        const name = setlist ? setlist.name.replace(/\s+/g, "_") : "setlist";
-                        this.downloadFile(`${name}.${ext}`, content,
-                            ext === "json" ? "application/json" : ext === "csv" ? "text/csv" : "text/plain"
-                        );
-                    } else {
-                        alert("Export failed.");
-                    }
-                });
-                document.getElementById('import-setlist-file').addEventListener('change', (e) => {
-                    const file = e.target.files[0];
-                    if (!file) return;
-                    const reader = new FileReader();
-                    reader.onload = (event) => {
-                        let text = event.target.result;
-                        let setlistName = prompt("Setlist name?", file.name.replace(/\.[^/.]+$/, ''));
-                        if (!setlistName) return;
-                        if (file.name.endsWith('.docx')) {
-                            mammoth.extractRawText({ arrayBuffer: event.target.result })
-                                .then(result => {
-                                    text = result.value;
-                                    finishImportSetlist(setlistName, text);
-                                });
-                        } else {
-                            finishImportSetlist(setlistName, text);
-                        }
-                    };
-                    if (file.name.endsWith('.docx')) {
-                        reader.readAsArrayBuffer(file);
-                    } else {
-                        reader.readAsText(file);
-                    }
-                    e.target.value = '';
-                });
-            } else if (tab === 'performance') {
-                this.performanceSetlistSelect = document.getElementById('performance-setlist-select');
-                this.performanceSongSearch = document.getElementById('performance-song-search');
-                this.startPerformanceBtn = document.getElementById('start-performance-btn');
-                this.performanceSetlistSelect.addEventListener('change', () => this.handlePerformanceSetlistChange());
-                this.performanceSongSearch.addEventListener('input', () => this.handlePerformanceSongSearch());
-                this.startPerformanceBtn.addEventListener('click', () => this.handleStartPerformance());
-            }
-        },
+      if (tab === "songs") {
+        this.songSearchInput = document.getElementById("song-search-input");
+        this.addSongBtn = document.getElementById("add-song-btn");
+        this.deleteAllSongsBtn = document.getElementById(
+          "delete-all-songs-btn",
+        );
+        this.songUploadInput = document.getElementById("song-upload-input");
 
-        // Core App Initialization
-        init() {
-            this.loadData();
-            this.renderToolbar('songs');
-            this.setlistSelect = document.getElementById('setlist-select');
-            this.performanceSetlistSelect = document.getElementById('performance-setlist-select');
-            this.setupEventListeners();
+        this.songSearchInput.addEventListener("input", () =>
+          this.renderSongs(),
+        );
+        this.addSongBtn.addEventListener("click", () => this.openSongModal());
+        this.deleteAllSongsBtn.addEventListener("click", () => {
+          if (confirm("Delete ALL songs? This cannot be undone!")) {
+            this.songs = [];
+            this.saveData();
             this.renderSongs();
-            if (this.setlistSelect && this.performanceSetlistSelect) {
-                this.renderSetlists();
+          }
+        });
+        this.songUploadInput.addEventListener("change", (e) =>
+          this.handleFileUpload(e),
+        );
+      } else if (tab === "setlists") {
+        this.setlistSelect = document.getElementById("setlist-select");
+        this.newSetlistBtn = document.getElementById("new-setlist-btn");
+        this.renameSetlistBtn = document.getElementById("rename-setlist-btn");
+        this.duplicateSetlistBtn = document.getElementById(
+          "duplicate-setlist-btn",
+        );
+        this.deleteSetlistBtn = document.getElementById("delete-setlist-btn");
+        this.setlistSelect.addEventListener("change", (e) =>
+          this.handleSetlistSelectChange(e),
+        );
+        this.newSetlistBtn.addEventListener("click", () =>
+          this.openSetlistModal(),
+        );
+        this.renameSetlistBtn.addEventListener("click", () =>
+          this.openSetlistModal("rename"),
+        );
+        this.duplicateSetlistBtn.addEventListener("click", () =>
+          this.handleDuplicateSetlist(),
+        );
+        this.deleteSetlistBtn.addEventListener("click", () =>
+          this.handleDeleteSetlist(),
+        );
+        document
+          .getElementById("import-setlist-btn")
+          .addEventListener("click", () => {
+            document.getElementById("import-setlist-file").click();
+          });
+        document
+          .getElementById("export-setlist-btn")
+          .addEventListener("click", () => {
+            if (!this.currentSetlistId) {
+              alert("No setlist selected!");
+              return;
             }
-
-        },
-
-        // Data Management
-        loadData() {
-            this.songs = JSON.parse(localStorage.getItem('songs')) || [];
-            const theme = localStorage.getItem('theme') || 'dark';
-            document.documentElement.dataset.theme = theme;
-        },
-
-        saveData() {
-            localStorage.setItem('songs', JSON.stringify(this.songs));
-        },
-
-        // Lyrics Management
-        getAllLyrics() {
-            return this.songs;
-        },
-
-        getLyricById(id) {
-            return this.songs.find(song => song.id === id);
-        },
-
-        addLyric(song) {
-            this.songs.push(song);
-            this.saveData();
-        },
-
-        removeLyric(id) {
-            this.songs = this.songs.filter(song => song.id !== id);
-            this.saveData();
-        },
-
-        searchLyrics(query) {
-            query = query.trim().toLowerCase();
-            return this.songs.filter(song =>
-                song.title.toLowerCase().includes(query) ||
-                (song.lyrics && song.lyrics.toLowerCase().includes(query))
+            const format = prompt("Export format? (json/txt/csv)", "json");
+            if (!format) return;
+            const content = SetlistsManager.exportSetlist(
+              this.currentSetlistId,
+              this.songs,
+              format.trim().toLowerCase(),
             );
-        },
-
-        renameLyric(id, newTitle) {
-            const song = this.getLyricById(id);
-            if (song) {
-                song.title = newTitle;
-                this.saveData();
+            if (content) {
+              let ext =
+                format === "csv" ? "csv" : format === "txt" ? "txt" : "json";
+              const setlist = SetlistsManager.getSetlistById(
+                this.currentSetlistId,
+              );
+              const name = setlist
+                ? setlist.name.replace(/\s+/g, "_")
+                : "setlist";
+              this.downloadFile(
+                `${name}.${ext}`,
+                content,
+                ext === "json"
+                  ? "application/json"
+                  : ext === "csv"
+                    ? "text/csv"
+                    : "text/plain",
+              );
+            } else {
+              alert("Export failed.");
             }
-        },
-
-        editLyric(id, newLyrics) {
-            const song = this.getLyricById(id);
-            if (song) {
-                song.lyrics = newLyrics;
-                this.saveData();
+          });
+        document
+          .getElementById("import-setlist-file")
+          .addEventListener("change", (e) => {
+            const file = e.target.files[0];
+            if (!file) return;
+            const reader = new FileReader();
+            reader.onload = (event) => {
+              let text = event.target.result;
+              let setlistName = prompt(
+                "Setlist name?",
+                file.name.replace(/\.[^/.]+$/, ""),
+              );
+              if (!setlistName) return;
+              if (file.name.endsWith(".docx")) {
+                mammoth
+                  .extractRawText({ arrayBuffer: event.target.result })
+                  .then((result) => {
+                    text = result.value;
+                    finishImportSetlist(setlistName, text);
+                  });
+              } else {
+                finishImportSetlist(setlistName, text);
+              }
+            };
+            if (file.name.endsWith(".docx")) {
+              reader.readAsArrayBuffer(file);
+            } else {
+              reader.readAsText(file);
             }
-        },
-
-        // Event Listeners
-
-        setupEventListeners() {
-            this.navButtons.forEach(btn => {
-                btn.addEventListener('click', () => {
-                    this.tabs.forEach(tab => tab.classList.remove('active'));
-                    this.navButtons.forEach(b => b.classList.remove('active'));
-                    btn.classList.add('active');
-                    const tabName = btn.getAttribute('data-tab');
-                    document.getElementById(tabName).classList.add('active');
-                    this.renderToolbar(tabName);
-                    if (tabName === 'songs') this.renderSongs();
-                    if (tabName === 'setlists') this.renderSetlists();
-                    if (tabName === 'performance') this.renderPerformanceTab();
-                });
-            });
-
-            this.saveSongBtn.onclick = () => this.saveSong();
-            this.cancelSongBtn.onclick = () => this.closeSongModal();
-            this.saveSetlistBtn.addEventListener('click', () => this.saveSetlist());
-            this.cancelSetlistBtn.addEventListener('click', () => this.closeSetlistModal());
-            this.availableSongsContainer.addEventListener('click', (e) => this.handleAvailableSongsClick(e));
-            this.currentSetlistSongsContainer.addEventListener('click', (e) => this.handleCurrentSetlistSongsClick(e));
-            this.performanceSongList.addEventListener('click', (e) => this.handlePerformanceSongClick(e));
-            this.songList.addEventListener('click', (e) => {
-                const item = e.target.closest('.song-item');
-                if (item) this.currentSongId = item.dataset.id;
-            });
-            // Add theme toggle button handler
-            document.getElementById('theme-toggle-btn')?.addEventListener('click', () => {
-                const currentTheme = document.documentElement.dataset.theme;
-                const isDark = currentTheme.includes('dark');
-                const newTheme = isDark ? currentTheme.replace('dark', 'light') : currentTheme.replace('light', 'dark');
-                document.documentElement.dataset.theme = newTheme;
-                localStorage.setItem('theme', newTheme);
-            });
-        },
-
-        // Song UI and Actions
-        renderSongs() {
-            const query = this.songSearchInput.value.toLowerCase();
-            const filteredSongs = this.searchLyrics(query)
-                .sort((a, b) => a.title.localeCompare(b.title));
-            this.songList.innerHTML = filteredSongs.map(song => `
+            e.target.value = "";
+          });
+      } else if (tab === "performance") {
+        this.performanceSetlistSelect = document.getElementById(
+          "performance-setlist-select",
+        );
+        this.performanceSongSearch = document.getElementById(
+          "performance-song-search",
+        );
+        this.startPerformanceBtn = document.getElementById(
+          "start-performance-btn",
+        );
+        this.performanceSetlistSelect.addEventListener("change", () =>
+          this.handlePerformanceSetlistChange(),
+        );
+        this.performanceSongSearch.addEventListener("input", () =>
+          this.handlePerformanceSongSearch(),
+        );
+        this.startPerformanceBtn.addEventListener("click", () =>
+          this.handleStartPerformance(),
+        );
+      }
+    },
+
+    // Core App Initialization
+    init() {
+      this.loadData();
+      this.renderToolbar("songs");
+      this.setlistSelect = document.getElementById("setlist-select");
+      this.performanceSetlistSelect = document.getElementById(
+        "performance-setlist-select",
+      );
+      this.setupEventListeners();
+      this.renderSongs();
+      if (this.setlistSelect && this.performanceSetlistSelect) {
+        this.renderSetlists();
+      }
+    },
+
+    // Data Management
+    loadData() {
+      this.songs = JSON.parse(localStorage.getItem("songs")) || [];
+      const theme = localStorage.getItem("theme") || "dark";
+      document.documentElement.dataset.theme = theme;
+    },
+
+    saveData() {
+      localStorage.setItem("songs", JSON.stringify(this.songs));
+    },
+
+    // Lyrics Management
+    getAllLyrics() {
+      return this.songs;
+    },
+
+    getLyricById(id) {
+      return this.songs.find((song) => song.id === id);
+    },
+
+    addLyric(song) {
+      this.songs.push(song);
+      this.saveData();
+    },
+
+    removeLyric(id) {
+      this.songs = this.songs.filter((song) => song.id !== id);
+      this.saveData();
+    },
+
+    searchLyrics(query) {
+      query = query.trim().toLowerCase();
+      return this.songs.filter(
+        (song) =>
+          song.title.toLowerCase().includes(query) ||
+          (song.lyrics && song.lyrics.toLowerCase().includes(query)),
+      );
+    },
+
+    renameLyric(id, newTitle) {
+      const song = this.getLyricById(id);
+      if (song) {
+        song.title = newTitle;
+        this.saveData();
+      }
+    },
+
+    editLyric(id, newLyrics) {
+      const song = this.getLyricById(id);
+      if (song) {
+        song.lyrics = newLyrics;
+        this.saveData();
+      }
+    },
+
+    // Event Listeners
+
+    setupEventListeners() {
+      this.navButtons.forEach((btn) => {
+        btn.addEventListener("click", () => {
+          this.tabs.forEach((tab) => tab.classList.remove("active"));
+          this.navButtons.forEach((b) => b.classList.remove("active"));
+          btn.classList.add("active");
+          const tabName = btn.getAttribute("data-tab");
+          document.getElementById(tabName).classList.add("active");
+          this.renderToolbar(tabName);
+          if (tabName === "songs") this.renderSongs();
+          if (tabName === "setlists") this.renderSetlists();
+          if (tabName === "performance") this.renderPerformanceTab();
+        });
+      });
+
+      this.saveSongBtn.onclick = () => this.saveSong();
+      this.cancelSongBtn.onclick = () => this.closeSongModal();
+      this.saveSetlistBtn.addEventListener("click", () => this.saveSetlist());
+      this.cancelSetlistBtn.addEventListener("click", () =>
+        this.closeSetlistModal(),
+      );
+      this.availableSongsContainer.addEventListener("click", (e) =>
+        this.handleAvailableSongsClick(e),
+      );
+      this.currentSetlistSongsContainer.addEventListener("click", (e) =>
+        this.handleCurrentSetlistSongsClick(e),
+      );
+      this.performanceSongList.addEventListener("click", (e) =>
+        this.handlePerformanceSongClick(e),
+      );
+      this.songList.addEventListener("click", (e) => {
+        const item = e.target.closest(".song-item");
+        if (item) this.currentSongId = item.dataset.id;
+      });
+      // Add theme toggle button handler
+      document
+        .getElementById("theme-toggle-btn")
+        ?.addEventListener("click", () => {
+          const currentTheme = document.documentElement.dataset.theme;
+          const isDark = currentTheme.includes("dark");
+          const newTheme = isDark
+            ? currentTheme.replace("dark", "light")
+            : currentTheme.replace("light", "dark");
+          document.documentElement.dataset.theme = newTheme;
+          localStorage.setItem("theme", newTheme);
+        });
+    },
+
+    // Song UI and Actions
+    renderSongs() {
+      const query = this.songSearchInput.value.toLowerCase();
+      const filteredSongs = this.searchLyrics(query).sort((a, b) =>
+        a.title.localeCompare(b.title),
+      );
+      this.songList.innerHTML = filteredSongs
+        .map(
+          (song) => `
                 <div class="song-item" data-id="${song.id}">
                     <span>${song.title}</span>
                     <div class="song-actions">
                         <button class="btn edit-song-btn"><i class="fas fa-pen"></i></button>
                         <button class="btn danger delete-song-btn"><i class="fas fa-trash"></i></button>
                     </div>
                 </div>
-            `).join('');
-
-            document.querySelectorAll('.edit-song-btn').forEach(btn => {
-                btn.addEventListener('click', (e) => {
-                    const id = e.target.closest('.song-item').dataset.id;
-                    this.currentSongId = id;
-                    ensureEditorLoaded(true, id);
-                });
-            });
-
-            document.querySelectorAll('.delete-song-btn').forEach(btn => {
-                btn.addEventListener('click', (e) => {
-                    const id = e.target.closest('.song-item').dataset.id;
-                    this.deleteSong(id);
-                });
-            });
-        },
-
-        openSongModal(id = null) {
-            this.currentSongId = id;
-            if (id) {
-                const song = this.getLyricById(id);
-                this.songModalTitle.textContent = 'Edit Song';
-                this.songTitleInput.value = song.title;
-                this.songLyricsInput.value = song.lyrics;
-            } else {
-                this.songModalTitle.textContent = 'Add Song';
-                this.songTitleInput.value = '';
-                this.songLyricsInput.value = '';
-            }
-            // enable/disable Save
-            const validate = () => {
-                const t = this.normalizeTitle(this.songTitleInput.value.trim());
-                const isGeneric = /^(new song|untitled|new|song)$/i.test(t);
-                this.saveSongBtn.disabled = !t || isGeneric;
-            };
-            this.songTitleInput.removeEventListener('_validate', validate); // no-op label to avoid duplicates
-            this.songTitleInput.addEventListener('input', validate);
-            validate();
-
-            this.songModal.style.display = 'block';
-        },
-
-        closeSongModal() {
-            this.songModal.style.display = 'none';
-        },
-
-        saveSong() {
-            const rawTitle = this.songTitleInput.value.trim();
-            const title = this.normalizeTitle(rawTitle);
-            const lyrics = (this.songLyricsInput.value || '').trim();
-
-            // Treat placeholder/generic titles as invalid if lyrics are empty
-            const isGenericTitle = /^(new song|untitled|new|song)$/i.test(title);
-
-            if (!title || (isGenericTitle && lyrics.length === 0)) {
-                alert('Please enter a real song title (not "New Song"/"Untitled") and/or add some lyrics.');
-                return;
-            }
-
-            if (this.currentSongId) {
-                const song = this.songs.find(s => s.id === this.currentSongId);
-                if (song) {
-                    song.title = title;
-                    song.lyrics = lyrics;
-                }
-            } else {
-                if (this.isDuplicateTitle(title)) {
-                    alert('A song with that title already exists.');
-                    this.closeSongModal();
-                    return;
-                }
-                this.songs.push({
-                    id: Date.now().toString(),
-                    title,
-                    lyrics,
-                });
-            }
-            this.saveData();
-            this.renderSongs();
-            this.closeSongModal();
-        },
-
-        deleteSong(id) {
-            if (confirm('Are you sure you want to delete this song?')) {
-                this.removeLyric(id);
-                SetlistsManager.getAllSetlists().forEach(s => {
-                    SetlistsManager.removeSongFromSetlist(s.id, id);
-                });
-                this.renderSongs();
-                this.renderSetlists();
-            }
-        },
-
-        handleFileUpload(event) {
-            const files = event.target.files;
-            const MIN_USEFUL_LEN = 3; // tweak if you want
-
-            for (const file of files) {
-                const pushIfValid = (proposedTitle, rawLyrics) => {
-                    const title = this.normalizeTitle(proposedTitle || '');
-                    const lyrics = (rawLyrics || '').toString().trim();
-
-                    const isGenericTitle = /^(new song|untitled|new|song)$/i.test(title);
-                    const looksEmpty = lyrics.replace(/\s+/g, '').length < MIN_USEFUL_LEN;
-
-                    // Skip junky uploads
-                    if (!title || (isGenericTitle && looksEmpty)) return;
-                    if (this.isDuplicateTitle(title)) return;
-
-                    this.songs.push({ id: Date.now().toString(), title, lyrics });
-                    this.saveData();
-                    this.renderSongs();
-                };
-
-                const reader = new FileReader();
-                if (file.name.endsWith('.docx')) {
-                    reader.onload = (e) => {
-                        mammoth.extractRawText({ arrayBuffer: e.target.result })
-                            .then(result => {
-                                pushIfValid(file.name, result.value);
-                            });
-                    };
-                    reader.readAsArrayBuffer(file);
-                } else {
-                    reader.onload = (e) => {
-                        pushIfValid(file.name, e.target.result);
-                    };
-                    reader.readAsText(file);
-                }
-            }
-            // optional: clear input
-            event.target.value = '';
-        },
-
-        // Setlist Management
-        renderSetlists() {
-            const setlists = SetlistsManager.getAllSetlists();
-            if (this.setlistSelect) {
-                this.setlistSelect.innerHTML = '<option value="">Select a setlist...</option>';
-            }
-            if (this.performanceSetlistSelect) {
-                this.performanceSetlistSelect.innerHTML = '<option value="">All Songs</option>';
-            }
-
-            setlists.forEach(s => {
-                if (this.setlistSelect) {
-                    const opt = document.createElement('option');
-                    opt.value = s.id;
-                    opt.textContent = s.name;
-                    this.setlistSelect.appendChild(opt);
-                }
-                if (this.performanceSetlistSelect) {
-                    const perfOpt = document.createElement('option');
-                    perfOpt.value = s.id;
-                    perfOpt.textContent = s.name;
-                    this.performanceSetlistSelect.appendChild(perfOpt);
-                }
-            });
-
-            if (setlists.length && this.currentSetlistId) {
-                if (this.setlistSelect) this.setlistSelect.value = this.currentSetlistId;
-                this.renderSetlistSongs();
-            } else if (setlists.length > 0) {
-                this.currentSetlistId = setlists[0].id;
-                if (this.setlistSelect) this.setlistSelect.value = this.currentSetlistId;
-                this.renderSetlistSongs();
-            } else {
-                this.currentSetlistId = null;
-                this.availableSongsContainer.innerHTML = '<p>No songs available</p>';
-                this.currentSetlistSongsContainer.innerHTML = '<p>No setlist selected</p>';
-                this.currentSetlistTitle.textContent = 'Current Setlist';
-            }
-        },
+            `,
+        )
+        .join("");
+
+      document.querySelectorAll(".edit-song-btn").forEach((btn) => {
+        btn.addEventListener("click", (e) => {
+          const id = e.target.closest(".song-item").dataset.id;
+          this.currentSongId = id;
+          ensureEditorLoaded(true, id);
+        });
+      });
 
-        renderSetlistSongs() {
-            const setlist = SetlistsManager.getSetlistById(this.currentSetlistId);
-            const allSongs = this.songs;
+      document.querySelectorAll(".delete-song-btn").forEach((btn) => {
+        btn.addEventListener("click", (e) => {
+          const id = e.target.closest(".song-item").dataset.id;
+          this.deleteSong(id);
+        });
+      });
+    },
+
+    openSongModal(id = null) {
+      this.currentSongId = id;
+      if (id) {
+        const song = this.getLyricById(id);
+        this.songModalTitle.textContent = "Edit Song";
+        this.songTitleInput.value = song.title;
+        this.songLyricsInput.value = song.lyrics;
+      } else {
+        this.songModalTitle.textContent = "Add Song";
+        this.songTitleInput.value = "";
+        this.songLyricsInput.value = "";
+      }
+      // enable/disable Save
+      const validate = () => {
+        const t = this.normalizeTitle(this.songTitleInput.value.trim());
+        const isGeneric = /^(new song|untitled|new|song)$/i.test(t);
+        this.saveSongBtn.disabled = !t || isGeneric;
+      };
+      this.songTitleInput.removeEventListener("_validate", validate); // no-op label to avoid duplicates
+      this.songTitleInput.addEventListener("input", validate);
+      validate();
+
+      this.songModal.style.display = "block";
+    },
+
+    closeSongModal() {
+      this.songModal.style.display = "none";
+    },
+
+    saveSong() {
+      const rawTitle = this.songTitleInput.value.trim();
+      const title = this.normalizeTitle(rawTitle);
+      const lyrics = (this.songLyricsInput.value || "").trim();
+
+      // Treat placeholder/generic titles as invalid if lyrics are empty
+      const isGenericTitle = /^(new song|untitled|new|song)$/i.test(title);
+
+      if (!title || (isGenericTitle && lyrics.length === 0)) {
+        alert(
+          'Please enter a real song title (not "New Song"/"Untitled") and/or add some lyrics.',
+        );
+        return;
+      }
 
-            if (!setlist) {
-                this.availableSongsContainer.innerHTML = '<p>No setlist selected</p>';
-                this.currentSetlistSongsContainer.innerHTML = '<p>No setlist selected</p>';
-                return;
-            }
+      if (this.currentSongId) {
+        const song = this.songs.find((s) => s.id === this.currentSongId);
+        if (song) {
+          song.title = title;
+          song.lyrics = lyrics;
+        }
+      } else {
+        if (this.isDuplicateTitle(title)) {
+          alert("A song with that title already exists.");
+          this.closeSongModal();
+          return;
+        }
+        this.songs.push({
+          id: Date.now().toString(),
+          title,
+          lyrics,
+        });
+      }
+      this.saveData();
+      this.renderSongs();
+      this.closeSongModal();
+    },
+
+    deleteSong(id) {
+      if (confirm("Are you sure you want to delete this song?")) {
+        this.removeLyric(id);
+        SetlistsManager.getAllSetlists().forEach((s) => {
+          SetlistsManager.removeSongFromSetlist(s.id, id);
+        });
+        this.renderSongs();
+        this.renderSetlists();
+      }
+    },
+
+    handleFileUpload(event) {
+      const files = event.target.files;
+      const MIN_USEFUL_LEN = 3; // tweak if you want
+
+      for (const file of files) {
+        const pushIfValid = (proposedTitle, rawLyrics) => {
+          const title = this.normalizeTitle(proposedTitle || "");
+          const lyrics = (rawLyrics || "").toString().trim();
+
+          const isGenericTitle = /^(new song|untitled|new|song)$/i.test(title);
+          const looksEmpty = lyrics.replace(/\s+/g, "").length < MIN_USEFUL_LEN;
+
+          // Skip junky uploads
+          if (!title || (isGenericTitle && looksEmpty)) return;
+          if (this.isDuplicateTitle(title)) return;
+
+          this.songs.push({ id: Date.now().toString(), title, lyrics });
+          this.saveData();
+          this.renderSongs();
+        };
 
-            const availableSongs = allSongs
-                .filter(s => !setlist.songs.includes(s.id))
-                .sort((a, b) => a.title.localeCompare(b.title));
-            this.availableSongsContainer.innerHTML = availableSongs.length > 0 
-                ? availableSongs.map(s =>
-                    `<div class="song-item" data-id="${s.id}">
+        const reader = new FileReader();
+        if (file.name.endsWith(".docx")) {
+          reader.onload = (e) => {
+            mammoth
+              .extractRawText({ arrayBuffer: e.target.result })
+              .then((result) => {
+                pushIfValid(file.name, result.value);
+              });
+          };
+          reader.readAsArrayBuffer(file);
+        } else {
+          reader.onload = (e) => {
+            pushIfValid(file.name, e.target.result);
+          };
+          reader.readAsText(file);
+        }
+      }
+      // optional: clear input
+      event.target.value = "";
+    },
+
+    // Setlist Management
+    renderSetlists() {
+      const setlists = SetlistsManager.getAllSetlists();
+      if (this.setlistSelect) {
+        this.setlistSelect.innerHTML =
+          '<option value="">Select a setlist...</option>';
+      }
+      if (this.performanceSetlistSelect) {
+        this.performanceSetlistSelect.innerHTML =
+          '<option value="">All Songs</option>';
+      }
+
+      setlists.forEach((s) => {
+        if (this.setlistSelect) {
+          const opt = document.createElement("option");
+          opt.value = s.id;
+          opt.textContent = s.name;
+          this.setlistSelect.appendChild(opt);
+        }
+        if (this.performanceSetlistSelect) {
+          const perfOpt = document.createElement("option");
+          perfOpt.value = s.id;
+          perfOpt.textContent = s.name;
+          this.performanceSetlistSelect.appendChild(perfOpt);
+        }
+      });
+
+      if (setlists.length && this.currentSetlistId) {
+        if (this.setlistSelect)
+          this.setlistSelect.value = this.currentSetlistId;
+        this.renderSetlistSongs();
+      } else if (setlists.length > 0) {
+        this.currentSetlistId = setlists[0].id;
+        if (this.setlistSelect)
+          this.setlistSelect.value = this.currentSetlistId;
+        this.renderSetlistSongs();
+      } else {
+        this.currentSetlistId = null;
+        this.availableSongsContainer.innerHTML = "<p>No songs available</p>";
+        this.currentSetlistSongsContainer.innerHTML =
+          "<p>No setlist selected</p>";
+        this.currentSetlistTitle.textContent = "Current Setlist";
+      }
+    },
+
+    renderSetlistSongs() {
+      const setlist = SetlistsManager.getSetlistById(this.currentSetlistId);
+      const allSongs = this.songs;
+
+      if (!setlist) {
+        this.availableSongsContainer.innerHTML = "<p>No setlist selected</p>";
+        this.currentSetlistSongsContainer.innerHTML =
+          "<p>No setlist selected</p>";
+        return;
+      }
+
+      const availableSongs = allSongs
+        .filter((s) => !setlist.songs.includes(s.id))
+        .sort((a, b) => a.title.localeCompare(b.title));
+      this.availableSongsContainer.innerHTML =
+        availableSongs.length > 0
+          ? availableSongs
+              .map(
+                (s) =>
+                  `<div class="song-item" data-id="${s.id}">
                         <span>${s.title}</span>
                         <button class="btn add-to-setlist-btn" title="Add to Setlist"><i class="fas fa-arrow-right"></i></button>
-                    </div>`
-                ).join('')
-                : '<p>All songs are in this setlist</p>';
-
-            const setlistSongs = setlist.songs.map(id => allSongs.find(s => s.id === id)).filter(Boolean);
-            this.currentSetlistSongsContainer.innerHTML = setlistSongs.length > 0
-                ? setlistSongs.map(s =>
-                    `<div class="song-item sortable-setlist-song" data-id="${s.id}">
+                    </div>`,
+              )
+              .join("")
+          : "<p>All songs are in this setlist</p>";
+
+      const setlistSongs = setlist.songs
+        .map((id) => allSongs.find((s) => s.id === id))
+        .filter(Boolean);
+      this.currentSetlistSongsContainer.innerHTML =
+        setlistSongs.length > 0
+          ? setlistSongs
+              .map(
+                (s) =>
+                  `<div class="song-item sortable-setlist-song" data-id="${s.id}">
                         <span class="drag-handle" title="Drag to reorder" style="cursor:grab;"><i class="fas fa-grip-vertical"></i></span>
                         <span class="song-title">${s.title}</span>
                         <div>
                             <button class="btn move-up-btn" title="Move Up"><i class="fas fa-arrow-up"></i></button>
                             <button class="btn move-down-btn" title="Move Down"><i class="fas fa-arrow-down"></i></button>
                             <button class="btn remove-from-setlist-btn" title="Remove from Setlist"><i class="fas fa-times"></i></button>
                         </div>
-                    </div>`
-                ).join('')
-                : '<p>No songs in this setlist</p>';
-
-            if (this.sortableSetlist) {
-                this.sortableSetlist.destroy();
-            }
-            this.sortableSetlist = Sortable.create(this.currentSetlistSongsContainer, {
-                animation: 150,
-                handle: '.drag-handle',
-                ghostClass: 'drag-ghost',
-                delay: 0,
-                touchStartThreshold: 2,
-                onEnd: (evt) => {
-                    const newOrder = Array.from(this.currentSetlistSongsContainer.querySelectorAll('.song-item')).map(item => item.dataset.id);
-                    SetlistsManager.updateSetlistSongs(this.currentSetlistId, newOrder);
-                    this.renderSetlistSongs();
-                }
-            });
-        },
-
-        openSetlistModal(mode = 'add') {
-            this.modalMode = mode;
-            if (mode === 'rename' && this.currentSetlistId) {
-                const setlist = SetlistsManager.getSetlistById(this.currentSetlistId);
-                this.setlistModalTitle.textContent = 'Rename Setlist';
-                this.setlistNameInput.value = setlist?.name || '';
-            } else {
-                this.setlistModalTitle.textContent = 'New Setlist';
-                this.setlistNameInput.value = '';
-            }
-            this.setlistModal.style.display = 'block';
-            this.setlistNameInput.focus();
-        },
-
-        closeSetlistModal() {
-            this.setlistModal.style.display = 'none';
-            this.modalMode = null;
-        },
-
-        saveSetlist() {
-            const name = this.setlistNameInput.value.trim();
-            if (!name) {
-                alert('Please enter a setlist name');
-                return;
-            }
-
-            try {
-                if (this.modalMode === 'rename' && this.currentSetlistId) {
-                    SetlistsManager.renameSetlist(this.currentSetlistId, name);
-                } else {
-                    const setlist = SetlistsManager.addSetlist(name, []);
-                    this.currentSetlistId = setlist.id;
-                }
-            } catch (err) {
-                alert(err.message || 'Could not save setlist.');
-                return;
-            }
-            this.renderSetlists();
-            this.closeSetlistModal();
-        },
-
-        handleDuplicateSetlist() {
-            if (!this.currentSetlistId) return;
-            const newSetlist = SetlistsManager.duplicateSetlist(this.currentSetlistId);
-            if (newSetlist) {
-                this.currentSetlistId = newSetlist.id;
-                this.renderSetlists();
-            }
-        },
-
-        handleDeleteSetlist() {
-            if (!this.currentSetlistId) return;
-            if (confirm('Delete this setlist?')) {
-                SetlistsManager.deleteSetlist(this.currentSetlistId);
-                this.currentSetlistId = null;
-                this.renderSetlists();
-            }
-        },
-
-        handleSetlistSelectChange(e) {
-            this.currentSetlistId = e.target.value || null;
-            this.renderSetlistSongs();
-        },
-
-        handleAvailableSongsClick(e) {
-            if (!e.target.closest('.add-to-setlist-btn')) return;
-            const songItem = e.target.closest('.song-item');
-            if (!songItem || !this.currentSetlistId) return;
-            const id = songItem.dataset.id;
-            SetlistsManager.addSongToSetlist(this.currentSetlistId, id);
+                    </div>`,
+              )
+              .join("")
+          : "<p>No songs in this setlist</p>";
+
+      if (this.sortableSetlist) {
+        this.sortableSetlist.destroy();
+      }
+      this.sortableSetlist = Sortable.create(
+        this.currentSetlistSongsContainer,
+        {
+          animation: 150,
+          handle: ".drag-handle",
+          ghostClass: "drag-ghost",
+          delay: 0,
+          touchStartThreshold: 2,
+          onEnd: (evt) => {
+            const newOrder = Array.from(
+              this.currentSetlistSongsContainer.querySelectorAll(".song-item"),
+            ).map((item) => item.dataset.id);
+            SetlistsManager.updateSetlistSongs(this.currentSetlistId, newOrder);
             this.renderSetlistSongs();
+          },
         },
+      );
+    },
+
+    openSetlistModal(mode = "add") {
+      this.modalMode = mode;
+      if (mode === "rename" && this.currentSetlistId) {
+        const setlist = SetlistsManager.getSetlistById(this.currentSetlistId);
+        this.setlistModalTitle.textContent = "Rename Setlist";
+        this.setlistNameInput.value = setlist?.name || "";
+      } else {
+        this.setlistModalTitle.textContent = "New Setlist";
+        this.setlistNameInput.value = "";
+      }
+      this.setlistModal.style.display = "block";
+      this.setlistNameInput.focus();
+    },
+
+    closeSetlistModal() {
+      this.setlistModal.style.display = "none";
+      this.modalMode = null;
+    },
+
+    saveSetlist() {
+      const name = this.setlistNameInput.value.trim();
+      if (!name) {
+        alert("Please enter a setlist name");
+        return;
+      }
 
-        handleCurrentSetlistSongsClick(e) {
-            const songItem = e.target.closest('.song-item');
-            if (!songItem || !this.currentSetlistId) return;
-            const id = songItem.dataset.id;
-            if (e.target.closest('.remove-from-setlist-btn')) {
-                SetlistsManager.removeSongFromSetlist(this.currentSetlistId, id);
-                this.renderSetlistSongs();
-            } else if (e.target.closest('.move-up-btn')) {
-                SetlistsManager.moveSongInSetlist(this.currentSetlistId, id, -1);
-                this.renderSetlistSongs();
-            } else if (e.target.closest('.move-down-btn')) {
-                SetlistsManager.moveSongInSetlist(this.currentSetlistId, id, 1);
-                this.renderSetlistSongs();
-            }
-        },
-
-        // Performance Mode
-        renderPerformanceTab() {
-            this.renderSetlists();
-            this.handlePerformanceSetlistChange();
-        },
-
-        handlePerformanceSetlistChange() {
-            this.performanceSetlistId = this.performanceSetlistSelect.value || null;
-            this.renderPerformanceSongList();
-        },
-
-        handlePerformanceSongSearch() {
-            this.renderPerformanceSongList();
-        },
-
-        renderPerformanceSongList() {
-            let songs = [];
-            const query = this.performanceSongSearch.value.trim();
-
-            if (this.performanceSetlistId) {
-                const setlist = SetlistsManager.getSetlistById(this.performanceSetlistId);
-                if (setlist) {
-                    songs = setlist.songs.map(id => this.songs.find(s => s.id === id)).filter(Boolean);
-                }
-            } else {
-                songs = this.songs;
-            }
-
-            if (query) {
-                songs = songs.filter(song =>
-                    song.title.toLowerCase().includes(query.toLowerCase()) ||
-                    song.lyrics.toLowerCase().includes(query.toLowerCase())
-                );
-            }
+      try {
+        if (this.modalMode === "rename" && this.currentSetlistId) {
+          SetlistsManager.renameSetlist(this.currentSetlistId, name);
+        } else {
+          const setlist = SetlistsManager.addSetlist(name, []);
+          this.currentSetlistId = setlist.id;
+        }
+      } catch (err) {
+        alert(err.message || "Could not save setlist.");
+        return;
+      }
+      this.renderSetlists();
+      this.closeSetlistModal();
+    },
+
+    handleDuplicateSetlist() {
+      if (!this.currentSetlistId) return;
+      const newSetlist = SetlistsManager.duplicateSetlist(
+        this.currentSetlistId,
+      );
+      if (newSetlist) {
+        this.currentSetlistId = newSetlist.id;
+        this.renderSetlists();
+      }
+    },
+
+    handleDeleteSetlist() {
+      if (!this.currentSetlistId) return;
+      if (confirm("Delete this setlist?")) {
+        SetlistsManager.deleteSetlist(this.currentSetlistId);
+        this.currentSetlistId = null;
+        this.renderSetlists();
+      }
+    },
+
+    handleSetlistSelectChange(e) {
+      this.currentSetlistId = e.target.value || null;
+      this.renderSetlistSongs();
+    },
+
+    handleAvailableSongsClick(e) {
+      if (!e.target.closest(".add-to-setlist-btn")) return;
+      const songItem = e.target.closest(".song-item");
+      if (!songItem || !this.currentSetlistId) return;
+      const id = songItem.dataset.id;
+      SetlistsManager.addSongToSetlist(this.currentSetlistId, id);
+      this.renderSetlistSongs();
+    },
+
+    handleCurrentSetlistSongsClick(e) {
+      const songItem = e.target.closest(".song-item");
+      if (!songItem || !this.currentSetlistId) return;
+      const id = songItem.dataset.id;
+      if (e.target.closest(".remove-from-setlist-btn")) {
+        SetlistsManager.removeSongFromSetlist(this.currentSetlistId, id);
+        this.renderSetlistSongs();
+      } else if (e.target.closest(".move-up-btn")) {
+        SetlistsManager.moveSongInSetlist(this.currentSetlistId, id, -1);
+        this.renderSetlistSongs();
+      } else if (e.target.closest(".move-down-btn")) {
+        SetlistsManager.moveSongInSetlist(this.currentSetlistId, id, 1);
+        this.renderSetlistSongs();
+      }
+    },
+
+    // Performance Mode
+    renderPerformanceTab() {
+      this.renderSetlists();
+      this.handlePerformanceSetlistChange();
+    },
+
+    handlePerformanceSetlistChange() {
+      this.performanceSetlistId = this.performanceSetlistSelect.value || null;
+      this.renderPerformanceSongList();
+    },
+
+    handlePerformanceSongSearch() {
+      this.renderPerformanceSongList();
+    },
+
+    renderPerformanceSongList() {
+      let songs = [];
+      const query = this.performanceSongSearch.value.trim();
+
+      if (this.performanceSetlistId) {
+        const setlist = SetlistsManager.getSetlistById(
+          this.performanceSetlistId,
+        );
+        if (setlist) {
+          songs = setlist.songs
+            .map((id) => this.songs.find((s) => s.id === id))
+            .filter(Boolean);
+        }
+      } else {
+        songs = this.songs;
+      }
+
+      if (query) {
+        songs = songs.filter(
+          (song) =>
+            song.title.toLowerCase().includes(query.toLowerCase()) ||
+            song.lyrics.toLowerCase().includes(query.toLowerCase()),
+        );
+      }
 
-            this.performanceSongList.innerHTML = songs.map(song => `
+      this.performanceSongList.innerHTML = songs
+        .map(
+          (song) => `
                 <div class="song-item" data-id="${song.id}">
                     <span>${song.title}</span>
                     <button class="btn primary perform-song-btn" title="Perform This Song"><i class="fas fa-play"></i></button>
                 </div>
-            `).join('');
-        },
-
-        handlePerformanceSongClick(e) {
-            if (!e.target.closest('.perform-song-btn')) return;
-            const songItem = e.target.closest('.song-item');
-            if (!songItem) return;
-            const songId = songItem.dataset.id;
-            this.startPerformanceWithSong(songId);
-        },
-
-        handleStartPerformance() {
-            if (this.performanceSetlistId) {
-                const setlist = SetlistsManager.getSetlistById(this.performanceSetlistId);
-                if (setlist && setlist.songs.length > 0) {
-                    this.startPerformanceWithSong(setlist.songs[0]);
-                } else {
-                    alert('No songs in selected setlist');
-                }
-            } else {
-                if (this.songs.length > 0) {
-                    this.startPerformanceWithSong(this.songs[0].id);
-                } else {
-                    alert('No songs available');
-                }
-            }
-        },
-
-        startPerformanceWithSong(songId) {
-            const params = new URLSearchParams();
-            if (this.performanceSetlistId) {
-                params.set('setlistId', this.performanceSetlistId);
-            }
-            params.set('songId', songId);
-            window.location.href = `performance/performance.html?${params.toString()}`;
-        },
-
- // Helper for downloading a file
-        downloadFile(filename, content, mime = "text/plain") {
-            const blob = new Blob([content], { type: mime });
-            const link = document.createElement("a");
-            link.href = URL.createObjectURL(blob);
-            link.download = filename;
-            document.body.appendChild(link);
-            link.click();
-            setTimeout(() => {
-                URL.revokeObjectURL(link.href);
-                document.body.removeChild(link);
-            }, 150);
-        }
-    };
-
-    const originalRenderToolbar = app.renderToolbar.bind(app);
-    app.renderToolbar = function(tab) {
-        originalRenderToolbar(tab);
-        if (tab === 'editor') {
-            ensureEditorLoaded(false);
-            document.getElementById('new-song-in-editor')?.addEventListener('click', () => {
-                ensureEditorLoaded(true, null);
-            });
-            document.getElementById('open-selected-in-editor')?.addEventListener('click', () => {
-                const id = this.currentSongId || null;
-                ensureEditorLoaded(true, id);
-            });
+            `,
+        )
+        .join("");
+    },
+
+    handlePerformanceSongClick(e) {
+      if (!e.target.closest(".perform-song-btn")) return;
+      const songItem = e.target.closest(".song-item");
+      if (!songItem) return;
+      const songId = songItem.dataset.id;
+      this.startPerformanceWithSong(songId);
+    },
+
+    handleStartPerformance() {
+      if (this.performanceSetlistId) {
+        const setlist = SetlistsManager.getSetlistById(
+          this.performanceSetlistId,
+        );
+        if (setlist && setlist.songs.length > 0) {
+          this.startPerformanceWithSong(setlist.songs[0]);
+        } else {
+          alert("No songs in selected setlist");
         }
-    };
-
-    window.app = app;
-    app.init();
-
-    function finishImportSetlist(name, text) {
-        const result = SetlistsManager.importSetlistFromText(name, text, app.songs);
-        if (result) {
-            app.currentSetlistId = result.setlist.id;
-            app.renderSetlists();
-            alert(`Imported: ${result.imported} songs.\nNot found: ${result.notFound.length ? result.notFound.join(', ') : 'None'}`);
+      } else {
+        if (this.songs.length > 0) {
+          this.startPerformanceWithSong(this.songs[0].id);
         } else {
-            alert("Import failed.");
+          alert("No songs available");
         }
+      }
+    },
+
+    startPerformanceWithSong(songId) {
+      const params = new URLSearchParams();
+      if (this.performanceSetlistId) {
+        params.set("setlistId", this.performanceSetlistId);
+      }
+      params.set("songId", songId);
+      window.location.href = `performance/performance.html?${params.toString()}`;
+    },
+
+    // Helper for downloading a file
+    downloadFile(filename, content, mime = "text/plain") {
+      const blob = new Blob([content], { type: mime });
+      const link = document.createElement("a");
+      link.href = URL.createObjectURL(blob);
+      link.download = filename;
+      document.body.appendChild(link);
+      link.click();
+      setTimeout(() => {
+        URL.revokeObjectURL(link.href);
+        document.body.removeChild(link);
+      }, 150);
+    },
+  };
+
+  const originalRenderToolbar = app.renderToolbar.bind(app);
+  app.renderToolbar = function (tab) {
+    originalRenderToolbar(tab);
+    if (tab === "editor") {
+      ensureEditorLoaded(false);
+      document
+        .getElementById("new-song-in-editor")
+        ?.addEventListener("click", () => {
+          ensureEditorLoaded(true, null);
+        });
+      document
+        .getElementById("open-selected-in-editor")
+        ?.addEventListener("click", () => {
+          const id = this.currentSongId || null;
+          ensureEditorLoaded(true, id);
+        });
+    }
+  };
+
+  window.app = app;
+  app.init();
+
+  function finishImportSetlist(name, text) {
+    const result = SetlistsManager.importSetlistFromText(name, text, app.songs);
+    if (result) {
+      app.currentSetlistId = result.setlist.id;
+      app.renderSetlists();
+      alert(
+        `Imported: ${result.imported} songs.\nNot found: ${result.notFound.length ? result.notFound.join(", ") : "None"}`,
+      );
+    } else {
+      alert("Import failed.");
     }
+  }
 });
diff --git a/sw.js b/sw.js
index a41c25f68df61ba664cb18e5e741a26b5dbbcc2c..fad4adf0d76cabd70ab104831b3f4368ce833464 100755
--- a/sw.js
+++ b/sw.js
@@ -1,28 +1,82 @@
-const CACHE_NAME = 'hill-rd-setlist-manager-v2';
-const urlsToCache = [
-    '/',
-    '/index.html',
-    '/style.css',
-    '/script.js',
-    '/manifest.json',
-    '/performance/performance.html',
-    '/performance/performance.js',
-    '/performance/performance.css',
-    '/assets/icons/icon-192x192.png',
-    '/assets/icons/icon-512x512.png',
-    '/assets/images/mylogo.png',
-    '/lib/mammoth.browser.min.js',
-    'https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css',
-    'https://cdn.jsdelivr.net/npm/fuse.js@6.6.2/dist/fuse.min.js'
+"use strict";
+const VERSION = "v10"; // bump on SW-relevant changes
+const STATIC_CACHE = `hrsm-static-${VERSION}`;
+const RUNTIME_CACHE = `hrsm-runtime-${VERSION}`;
+const STATIC_ASSETS = [
+  "/",
+  "/index.html",
+  "/editor/editor.html",
+  "/performance/performance.html",
+  "/style.css",
+  "/editor/editor.css",
+  "/performance/performance.css",
+  "/script.js",
+  "/editor/editor.js",
+  "/performance/performance.js",
+  "/core/song-core.js",
+  "/editor/songs.js",
+  "/config.js",
+  "/manifest.json",
+  "/assets/offline.html",
+  "/assets/favicon.svg",
 ];
-
-self.addEventListener('install', event => {
-    event.waitUntil(
-        caches.open(CACHE_NAME)
-            .then(cache => {
-                console.log('Opened cache');
-                return cache.addAll(urlsToCache);
-            })
+// install: pre-cache app shell
+self.addEventListener("install", (e) => {
+  e.waitUntil(
+    caches
+      .open(STATIC_CACHE)
+      .then((c) => c.addAll(STATIC_ASSETS))
+      .then(() => self.skipWaiting()),
+  );
+});
+// activate: clean old caches + claim
+self.addEventListener("activate", (e) => {
+  e.waitUntil(
+    caches
+      .keys()
+      .then((keys) =>
+        Promise.all(
+          keys
+            .filter((k) => ![STATIC_CACHE, RUNTIME_CACHE].includes(k))
+            .map((k) => caches.delete(k)),
+        ),
+      )
+      .then(() => self.clients.claim()),
+  );
+});
+// fetch handler
+self.addEventListener("fetch", (e) => {
+  const req = e.request;
+  const url = new URL(req.url);
+  if (url.origin !== self.location.origin) return;
+  if (req.mode === "navigate") {
+    e.respondWith(fetch(req).catch(() => caches.match("/assets/offline.html")));
+    return;
+  }
+  if (STATIC_ASSETS.includes(url.pathname)) {
+    e.respondWith(
+      caches.match(req).then(
+        (hit) =>
+          hit ||
+          fetch(req).then((res) => {
+            const copy = res.clone();
+            caches.open(STATIC_CACHE).then((c) => c.put(req, copy));
+            return res;
+          }),
+      ),
     );
+    return;
+  }
+  e.respondWith(
+    caches.match(req).then((hit) => {
+      const fetcher = fetch(req)
+        .then((res) => {
+          const copy = res.clone();
+          caches.open(RUNTIME_CACHE).then((c) => c.put(req, copy));
+          return res;
+        })
+        .catch(() => hit);
+      return hit || fetcher;
+    }),
+  );
 });
-
 
EOF
)
